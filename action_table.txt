0	identifier	Shift 4
0	data	Shift 5
1	$	Accept
2	$	Reduce 28
2	;	Shift 6
3	$	Reduce 30
3	;	Shift 7
4	:	Shift 8
5	identifier	Shift 10
6	identifier	Shift 4
6	data	Shift 5
7	identifier	Shift 4
7	data	Shift 5
8	{	Shift 20
8	[	Shift 21
8	(	Shift 22
8	identifier	Shift 19
9	=	Shift 23
10	=	Reduce 1
10	}	Reduce 1
10	]	Reduce 1
10	=>	Reduce 1
10	identifier	Shift 10
11	$	Reduce 29
12	$	Reduce 31
13	=	Shift 25
14	}	Reduce 9
14	|	Reduce 9
14	]	Reduce 9
14	=	Reduce 9
14	)	Reduce 9
14	,	Reduce 9
14	>	Reduce 9
14	{	Reduce 9
14	[	Reduce 9
14	(	Reduce 9
14	identifier	Reduce 9
14	@	Reduce 9
14	LocFun	Shift 26
15	}	Reduce 13
15	|	Reduce 13
15	]	Reduce 13
15	=	Reduce 13
15	LocFun	Reduce 13
15	)	Reduce 13
15	,	Reduce 13
15	>	Reduce 13
15	{	Reduce 13
15	[	Reduce 13
15	(	Reduce 13
15	identifier	Reduce 13
15	@	Reduce 13
16	}	Reduce 14
16	|	Reduce 14
16	]	Reduce 14
16	=	Reduce 14
16	LocFun	Reduce 14
16	)	Reduce 14
16	,	Reduce 14
16	>	Reduce 14
16	{	Reduce 14
16	[	Reduce 14
16	(	Reduce 14
16	identifier	Reduce 14
16	@	Reduce 14
17	}	Reduce 16
17	|	Reduce 16
17	]	Reduce 16
17	=	Reduce 16
17	LocFun	Reduce 16
17	)	Reduce 16
17	,	Reduce 16
17	>	Reduce 16
17	{	Reduce 16
17	[	Reduce 16
17	(	Reduce 16
17	identifier	Reduce 16
17	@	Reduce 16
18	}	Reduce 17
18	|	Reduce 17
18	]	Reduce 17
18	=	Reduce 17
18	LocFun	Reduce 17
18	)	Reduce 17
18	,	Reduce 17
18	>	Reduce 17
18	{	Reduce 17
18	[	Reduce 17
18	(	Reduce 17
18	identifier	Reduce 17
18	@	Reduce 17
19	}	Reduce 18
19	|	Reduce 18
19	]	Reduce 18
19	=	Reduce 18
19	LocFun	Reduce 18
19	)	Reduce 18
19	,	Reduce 18
19	>	Reduce 18
19	{	Reduce 18
19	[	Reduce 18
19	(	Reduce 18
19	identifier	Reduce 18
19	@	Reduce 18
19	<	Shift 27
20	identifier	Shift 10
21	identifier	Shift 10
22	{	Shift 20
22	[	Shift 21
22	(	Shift 22
22	identifier	Shift 19
23	{	Shift 31
24	=	Reduce 2
24	}	Reduce 2
24	]	Reduce 2
24	=>	Reduce 2
25	{	Shift 46
25	[	Shift 47
25	\	Shift 49
25	let	Shift 50
25	if	Shift 51
25	case	Shift 52
25	(	Shift 48
25	LogicNot	Shift 53
25	!	Shift 54
25	-	Shift 55
25	identifier	Shift 45
25	integer	Shift 56
25	string	Shift 57
25	boolean	Shift 58
26	{	Shift 20
26	[	Shift 21
26	(	Shift 22
26	identifier	Shift 19
27	{	Shift 20
27	[	Shift 21
27	(	Shift 22
27	identifier	Shift 19
28	}	Shift 62
29	]	Shift 63
30	)	Shift 65
30	,	Shift 64
31	identifier	Shift 68
32	$	Reduce 36
32	;	Reduce 36
32	}	Reduce 36
33	$	Reduce 45
33	;	Reduce 45
33	}	Reduce 45
33	,	Reduce 45
33	)	Reduce 45
33	else	Reduce 45
33	end	Reduce 45
33	[	Shift 71
33	{	Shift 70
33	identifier	Shift 45
33	integer	Shift 56
33	string	Shift 57
33	boolean	Shift 58
33	(	Shift 72
34	$	Reduce 86
34	;	Reduce 86
34	}	Reduce 86
34	:=	Reduce 86
34	identifier	Reduce 86
34	integer	Reduce 86
34	string	Reduce 86
34	boolean	Reduce 86
34	(	Reduce 86
34	[	Reduce 86
34	{	Reduce 86
34	or	Reduce 86
34	and	Reduce 86
34	==	Reduce 86
34	!=	Reduce 86
34	<	Reduce 86
34	<=	Reduce 86
34	>	Reduce 86
34	>=	Reduce 86
34	+	Reduce 86
34	-	Reduce 86
34	*	Reduce 86
34	/	Reduce 86
34	,	Reduce 86
34	)	Reduce 86
34	then	Reduce 86
34	else	Reduce 86
34	end	Reduce 86
35	$	Reduce 57
35	;	Reduce 57
35	}	Reduce 57
35	identifier	Reduce 57
35	integer	Reduce 57
35	string	Reduce 57
35	boolean	Reduce 57
35	(	Reduce 57
35	[	Reduce 57
35	{	Reduce 57
35	,	Reduce 57
35	)	Reduce 57
35	then	Reduce 57
35	else	Reduce 57
35	end	Reduce 57
36	$	Reduce 58
36	;	Reduce 58
36	}	Reduce 58
36	identifier	Reduce 58
36	integer	Reduce 58
36	string	Reduce 58
36	boolean	Reduce 58
36	(	Reduce 58
36	[	Reduce 58
36	{	Reduce 58
36	,	Reduce 58
36	)	Reduce 58
36	then	Reduce 58
36	else	Reduce 58
36	end	Reduce 58
37	$	Reduce 62
37	;	Reduce 62
37	}	Reduce 62
37	identifier	Reduce 62
37	integer	Reduce 62
37	string	Reduce 62
37	boolean	Reduce 62
37	(	Reduce 62
37	[	Reduce 62
37	{	Reduce 62
37	,	Reduce 62
37	)	Reduce 62
37	then	Reduce 62
37	else	Reduce 62
37	end	Reduce 62
37	:=	Shift 73
38	$	Reduce 66
38	;	Reduce 66
38	}	Reduce 66
38	:=	Reduce 66
38	identifier	Reduce 66
38	integer	Reduce 66
38	string	Reduce 66
38	boolean	Reduce 66
38	(	Reduce 66
38	[	Reduce 66
38	{	Reduce 66
38	,	Reduce 66
38	)	Reduce 66
38	then	Reduce 66
38	else	Reduce 66
38	end	Reduce 66
38	or	Shift 74
39	$	Reduce 68
39	;	Reduce 68
39	}	Reduce 68
39	:=	Reduce 68
39	identifier	Reduce 68
39	integer	Reduce 68
39	string	Reduce 68
39	boolean	Reduce 68
39	(	Reduce 68
39	[	Reduce 68
39	{	Reduce 68
39	or	Reduce 68
39	,	Reduce 68
39	)	Reduce 68
39	then	Reduce 68
39	else	Reduce 68
39	end	Reduce 68
39	and	Shift 75
40	$	Reduce 70
40	;	Reduce 70
40	}	Reduce 70
40	:=	Reduce 70
40	identifier	Reduce 70
40	integer	Reduce 70
40	string	Reduce 70
40	boolean	Reduce 70
40	(	Reduce 70
40	[	Reduce 70
40	{	Reduce 70
40	or	Reduce 70
40	and	Reduce 70
40	,	Reduce 70
40	)	Reduce 70
40	then	Reduce 70
40	else	Reduce 70
40	end	Reduce 70
40	==	Shift 76
40	!=	Shift 77
41	$	Reduce 73
41	;	Reduce 73
41	}	Reduce 73
41	:=	Reduce 73
41	identifier	Reduce 73
41	integer	Reduce 73
41	string	Reduce 73
41	boolean	Reduce 73
41	(	Reduce 73
41	[	Reduce 73
41	{	Reduce 73
41	or	Reduce 73
41	and	Reduce 73
41	==	Reduce 73
41	!=	Reduce 73
41	,	Reduce 73
41	)	Reduce 73
41	then	Reduce 73
41	else	Reduce 73
41	end	Reduce 73
41	<	Shift 78
41	<=	Shift 80
41	>	Shift 79
41	>=	Shift 81
42	$	Reduce 78
42	;	Reduce 78
42	}	Reduce 78
42	:=	Reduce 78
42	identifier	Reduce 78
42	integer	Reduce 78
42	string	Reduce 78
42	boolean	Reduce 78
42	(	Reduce 78
42	[	Reduce 78
42	{	Reduce 78
42	or	Reduce 78
42	and	Reduce 78
42	==	Reduce 78
42	!=	Reduce 78
42	<	Reduce 78
42	<=	Reduce 78
42	>	Reduce 78
42	>=	Reduce 78
42	,	Reduce 78
42	)	Reduce 78
42	then	Reduce 78
42	else	Reduce 78
42	end	Reduce 78
42	+	Shift 82
42	-	Shift 83
43	$	Reduce 81
43	;	Reduce 81
43	}	Reduce 81
43	:=	Reduce 81
43	identifier	Reduce 81
43	integer	Reduce 81
43	string	Reduce 81
43	boolean	Reduce 81
43	(	Reduce 81
43	[	Reduce 81
43	{	Reduce 81
43	or	Reduce 81
43	and	Reduce 81
43	==	Reduce 81
43	!=	Reduce 81
43	<	Reduce 81
43	<=	Reduce 81
43	>	Reduce 81
43	>=	Reduce 81
43	+	Reduce 81
43	-	Reduce 81
43	,	Reduce 81
43	)	Reduce 81
43	then	Reduce 81
43	else	Reduce 81
43	end	Reduce 81
43	*	Shift 84
43	/	Shift 85
44	$	Reduce 84
44	;	Reduce 84
44	}	Reduce 84
44	:=	Reduce 84
44	identifier	Reduce 84
44	integer	Reduce 84
44	string	Reduce 84
44	boolean	Reduce 84
44	(	Reduce 84
44	[	Reduce 84
44	{	Reduce 84
44	or	Reduce 84
44	and	Reduce 84
44	==	Reduce 84
44	!=	Reduce 84
44	<	Reduce 84
44	<=	Reduce 84
44	>	Reduce 84
44	>=	Reduce 84
44	+	Reduce 84
44	-	Reduce 84
44	*	Reduce 84
44	/	Reduce 84
44	,	Reduce 84
44	)	Reduce 84
44	then	Reduce 84
44	else	Reduce 84
44	end	Reduce 84
45	$	Reduce 87
45	;	Reduce 87
45	}	Reduce 87
45	:=	Reduce 87
45	identifier	Reduce 87
45	integer	Reduce 87
45	string	Reduce 87
45	boolean	Reduce 87
45	(	Reduce 87
45	[	Reduce 87
45	{	Reduce 87
45	or	Reduce 87
45	and	Reduce 87
45	==	Reduce 87
45	!=	Reduce 87
45	<	Reduce 87
45	<=	Reduce 87
45	>	Reduce 87
45	>=	Reduce 87
45	+	Reduce 87
45	-	Reduce 87
45	*	Reduce 87
45	/	Reduce 87
45	,	Reduce 87
45	)	Reduce 87
45	then	Reduce 87
45	else	Reduce 87
45	end	Reduce 87
46	identifier	Shift 10
47	identifier	Shift 10
48	)	Shift 89
48	{	Shift 46
48	[	Shift 47
48	\	Shift 49
48	let	Shift 50
48	if	Shift 51
48	case	Shift 52
48	(	Shift 48
48	LogicNot	Shift 53
48	!	Shift 54
48	-	Shift 55
48	identifier	Shift 45
48	integer	Shift 56
48	string	Shift 57
48	boolean	Shift 58
49	identifier	Shift 92
50	{	Shift 93
51	(	Shift 48
51	LogicNot	Shift 53
51	!	Shift 54
51	-	Shift 55
51	identifier	Shift 45
51	integer	Shift 56
51	string	Shift 57
51	boolean	Shift 58
52	(	Shift 48
52	LogicNot	Shift 53
52	!	Shift 54
52	-	Shift 55
52	identifier	Shift 45
52	integer	Shift 56
52	string	Shift 57
52	boolean	Shift 58
53	$	Reduce 64
53	;	Reduce 64
53	}	Reduce 64
53	:=	Reduce 64
53	identifier	Reduce 64
53	integer	Reduce 64
53	string	Reduce 64
53	boolean	Reduce 64
53	(	Reduce 64
53	[	Reduce 64
53	{	Reduce 64
53	,	Reduce 64
53	)	Reduce 64
53	then	Reduce 64
53	else	Reduce 64
53	end	Reduce 64
54	{	Shift 96
55	identifier	Shift 45
55	integer	Shift 56
55	string	Shift 57
55	boolean	Shift 58
55	(	Shift 72
56	$	Reduce 88
56	;	Reduce 88
56	}	Reduce 88
56	:=	Reduce 88
56	identifier	Reduce 88
56	integer	Reduce 88
56	string	Reduce 88
56	boolean	Reduce 88
56	(	Reduce 88
56	[	Reduce 88
56	{	Reduce 88
56	or	Reduce 88
56	and	Reduce 88
56	==	Reduce 88
56	!=	Reduce 88
56	<	Reduce 88
56	<=	Reduce 88
56	>	Reduce 88
56	>=	Reduce 88
56	+	Reduce 88
56	-	Reduce 88
56	*	Reduce 88
56	/	Reduce 88
56	,	Reduce 88
56	)	Reduce 88
56	then	Reduce 88
56	else	Reduce 88
56	end	Reduce 88
57	$	Reduce 89
57	;	Reduce 89
57	}	Reduce 89
57	:=	Reduce 89
57	identifier	Reduce 89
57	integer	Reduce 89
57	string	Reduce 89
57	boolean	Reduce 89
57	(	Reduce 89
57	[	Reduce 89
57	{	Reduce 89
57	or	Reduce 89
57	and	Reduce 89
57	==	Reduce 89
57	!=	Reduce 89
57	<	Reduce 89
57	<=	Reduce 89
57	>	Reduce 89
57	>=	Reduce 89
57	+	Reduce 89
57	-	Reduce 89
57	*	Reduce 89
57	/	Reduce 89
57	,	Reduce 89
57	)	Reduce 89
57	then	Reduce 89
57	else	Reduce 89
57	end	Reduce 89
58	$	Reduce 90
58	;	Reduce 90
58	}	Reduce 90
58	:=	Reduce 90
58	identifier	Reduce 90
58	integer	Reduce 90
58	string	Reduce 90
58	boolean	Reduce 90
58	(	Reduce 90
58	[	Reduce 90
58	{	Reduce 90
58	or	Reduce 90
58	and	Reduce 90
58	==	Reduce 90
58	!=	Reduce 90
58	<	Reduce 90
58	<=	Reduce 90
58	>	Reduce 90
58	>=	Reduce 90
58	+	Reduce 90
58	-	Reduce 90
58	*	Reduce 90
58	/	Reduce 90
58	,	Reduce 90
58	)	Reduce 90
58	then	Reduce 90
58	else	Reduce 90
58	end	Reduce 90
59	]	Reduce 10
59	}	Reduce 10
59	|	Reduce 10
59	=	Reduce 10
59	)	Reduce 10
59	,	Reduce 10
59	>	Reduce 10
59	{	Reduce 10
59	[	Reduce 10
59	(	Reduce 10
59	identifier	Reduce 10
59	@	Reduce 10
60	@	Shift 100
60	>	Reduce 23
60	{	Shift 20
60	[	Shift 21
60	(	Shift 22
60	identifier	Shift 19
61	>	Shift 101
62	.	Shift 102
63	.	Shift 103
64	{	Shift 20
64	[	Shift 21
64	(	Shift 22
64	identifier	Shift 19
65	]	Reduce 15
65	}	Reduce 15
65	|	Reduce 15
65	=	Reduce 15
65	LocFun	Reduce 15
65	)	Reduce 15
65	,	Reduce 15
65	>	Reduce 15
65	{	Reduce 15
65	[	Reduce 15
65	(	Reduce 15
65	identifier	Reduce 15
65	@	Reduce 15
66	}	Shift 106
67	}	Reduce 34
67	|	Shift 107
68	}	Reduce 25
68	|	Reduce 25
68	{	Shift 20
68	[	Shift 21
68	(	Shift 22
68	identifier	Shift 19
69	$	Reduce 54
69	;	Reduce 54
69	}	Reduce 54
69	identifier	Reduce 54
69	integer	Reduce 54
69	string	Reduce 54
69	boolean	Reduce 54
69	(	Reduce 54
69	[	Reduce 54
69	{	Reduce 54
69	,	Reduce 54
69	)	Reduce 54
69	else	Reduce 54
69	end	Reduce 54
69	then	Reduce 54
70	identifier	Shift 10
71	{	Shift 20
71	[	Shift 21
71	(	Shift 22
71	identifier	Shift 19
72	)	Shift 89
72	{	Shift 46
72	[	Shift 47
72	\	Shift 49
72	let	Shift 50
72	if	Shift 51
72	case	Shift 52
72	(	Shift 48
72	LogicNot	Shift 53
72	!	Shift 54
72	-	Shift 55
72	identifier	Shift 45
72	integer	Shift 56
72	string	Shift 57
72	boolean	Shift 58
73	{	Shift 113
74	-	Shift 55
74	identifier	Shift 45
74	integer	Shift 56
74	string	Shift 57
74	boolean	Shift 58
74	(	Shift 72
75	-	Shift 55
75	identifier	Shift 45
75	integer	Shift 56
75	string	Shift 57
75	boolean	Shift 58
75	(	Shift 72
76	-	Shift 55
76	identifier	Shift 45
76	integer	Shift 56
76	string	Shift 57
76	boolean	Shift 58
76	(	Shift 72
77	-	Shift 55
77	identifier	Shift 45
77	integer	Shift 56
77	string	Shift 57
77	boolean	Shift 58
77	(	Shift 72
78	-	Shift 55
78	identifier	Shift 45
78	integer	Shift 56
78	string	Shift 57
78	boolean	Shift 58
78	(	Shift 72
79	-	Shift 55
79	identifier	Shift 45
79	integer	Shift 56
79	string	Shift 57
79	boolean	Shift 58
79	(	Shift 72
80	-	Shift 55
80	identifier	Shift 45
80	integer	Shift 56
80	string	Shift 57
80	boolean	Shift 58
80	(	Shift 72
81	-	Shift 55
81	identifier	Shift 45
81	integer	Shift 56
81	string	Shift 57
81	boolean	Shift 58
81	(	Shift 72
82	-	Shift 55
82	identifier	Shift 45
82	integer	Shift 56
82	string	Shift 57
82	boolean	Shift 58
82	(	Shift 72
83	-	Shift 55
83	identifier	Shift 45
83	integer	Shift 56
83	string	Shift 57
83	boolean	Shift 58
83	(	Shift 72
84	-	Shift 55
84	identifier	Shift 45
84	integer	Shift 56
84	string	Shift 57
84	boolean	Shift 58
84	(	Shift 72
85	-	Shift 55
85	identifier	Shift 45
85	integer	Shift 56
85	string	Shift 57
85	boolean	Shift 58
85	(	Shift 72
86	}	Shift 126
87	]	Shift 127
88	,	Shift 128
88	)	Shift 129
89	$	Reduce 91
89	;	Reduce 91
89	}	Reduce 91
89	:=	Reduce 91
89	identifier	Reduce 91
89	integer	Reduce 91
89	string	Reduce 91
89	boolean	Reduce 91
89	(	Reduce 91
89	[	Reduce 91
89	{	Reduce 91
89	or	Reduce 91
89	and	Reduce 91
89	==	Reduce 91
89	!=	Reduce 91
89	<	Reduce 91
89	<=	Reduce 91
89	>	Reduce 91
89	>=	Reduce 91
89	+	Reduce 91
89	-	Reduce 91
89	*	Reduce 91
89	/	Reduce 91
89	,	Reduce 91
89	)	Reduce 91
89	then	Reduce 91
89	else	Reduce 91
89	end	Reduce 91
90	.	Shift 130
91	.	Reduce 46
91	identifier	Shift 92
92	:	Shift 132
93	identifier	Shift 4
94	then	Shift 135
94	[	Shift 71
94	{	Shift 70
94	identifier	Shift 45
94	integer	Shift 56
94	string	Shift 57
94	boolean	Shift 58
94	(	Shift 72
95	{	Shift 136
95	[	Shift 71
95	identifier	Shift 45
95	integer	Shift 56
95	string	Shift 57
95	boolean	Shift 58
95	(	Shift 72
96	identifier	Shift 10
97	$	Reduce 85
97	;	Reduce 85
97	}	Reduce 85
97	:=	Reduce 85
97	identifier	Reduce 85
97	integer	Reduce 85
97	string	Reduce 85
97	boolean	Reduce 85
97	(	Reduce 85
97	[	Reduce 85
97	{	Reduce 85
97	or	Reduce 85
97	and	Reduce 85
97	==	Reduce 85
97	!=	Reduce 85
97	<	Reduce 85
97	<=	Reduce 85
97	>	Reduce 85
97	>=	Reduce 85
97	+	Reduce 85
97	-	Reduce 85
97	*	Reduce 85
97	/	Reduce 85
97	,	Reduce 85
97	)	Reduce 85
97	then	Reduce 85
97	else	Reduce 85
97	end	Reduce 85
98	}	Reduce 23
98	|	Reduce 23
98	]	Reduce 23
98	>	Reduce 23
98	{	Shift 20
98	[	Shift 21
98	(	Shift 22
98	identifier	Shift 19
99	]	Reduce 24
99	}	Reduce 24
99	|	Reduce 24
99	>	Reduce 24
100	identifier	Shift 139
101	]	Reduce 19
101	}	Reduce 19
101	|	Reduce 19
101	=	Reduce 19
101	LocFun	Reduce 19
101	)	Reduce 19
101	,	Reduce 19
101	>	Reduce 19
101	{	Reduce 19
101	[	Reduce 19
101	(	Reduce 19
101	identifier	Reduce 19
101	@	Reduce 19
102	{	Shift 20
102	[	Shift 21
102	(	Shift 22
102	identifier	Shift 19
103	{	Shift 20
103	[	Shift 21
103	(	Shift 22
103	identifier	Shift 19
104	)	Reduce 21
104	,	Shift 142
105	)	Shift 143
106	$	Reduce 32
106	;	Reduce 32
107	identifier	Shift 68
108	}	Reduce 26
108	|	Reduce 26
109	}	Reduce 33
109	|	Reduce 33
110	}	Shift 145
111	]	Shift 146
112	)	Shift 129
113	identifier	Shift 10
114	$	Reduce 67
114	;	Reduce 67
114	}	Reduce 67
114	:=	Reduce 67
114	identifier	Reduce 67
114	integer	Reduce 67
114	string	Reduce 67
114	boolean	Reduce 67
114	(	Reduce 67
114	[	Reduce 67
114	{	Reduce 67
114	or	Reduce 67
114	,	Reduce 67
114	)	Reduce 67
114	then	Reduce 67
114	else	Reduce 67
114	end	Reduce 67
114	and	Shift 75
115	$	Reduce 69
115	;	Reduce 69
115	}	Reduce 69
115	:=	Reduce 69
115	identifier	Reduce 69
115	integer	Reduce 69
115	string	Reduce 69
115	boolean	Reduce 69
115	(	Reduce 69
115	[	Reduce 69
115	{	Reduce 69
115	or	Reduce 69
115	and	Reduce 69
115	,	Reduce 69
115	)	Reduce 69
115	then	Reduce 69
115	else	Reduce 69
115	end	Reduce 69
115	==	Shift 76
115	!=	Shift 77
116	$	Reduce 71
116	;	Reduce 71
116	}	Reduce 71
116	:=	Reduce 71
116	identifier	Reduce 71
116	integer	Reduce 71
116	string	Reduce 71
116	boolean	Reduce 71
116	(	Reduce 71
116	[	Reduce 71
116	{	Reduce 71
116	or	Reduce 71
116	and	Reduce 71
116	==	Reduce 71
116	!=	Reduce 71
116	,	Reduce 71
116	)	Reduce 71
116	then	Reduce 71
116	else	Reduce 71
116	end	Reduce 71
116	<	Shift 78
116	<=	Shift 80
116	>	Shift 79
116	>=	Shift 81
117	$	Reduce 72
117	;	Reduce 72
117	}	Reduce 72
117	:=	Reduce 72
117	identifier	Reduce 72
117	integer	Reduce 72
117	string	Reduce 72
117	boolean	Reduce 72
117	(	Reduce 72
117	[	Reduce 72
117	{	Reduce 72
117	or	Reduce 72
117	and	Reduce 72
117	==	Reduce 72
117	!=	Reduce 72
117	,	Reduce 72
117	)	Reduce 72
117	then	Reduce 72
117	else	Reduce 72
117	end	Reduce 72
117	<	Shift 78
117	<=	Shift 80
117	>	Shift 79
117	>=	Shift 81
118	$	Reduce 74
118	;	Reduce 74
118	}	Reduce 74
118	:=	Reduce 74
118	identifier	Reduce 74
118	integer	Reduce 74
118	string	Reduce 74
118	boolean	Reduce 74
118	(	Reduce 74
118	[	Reduce 74
118	{	Reduce 74
118	or	Reduce 74
118	and	Reduce 74
118	==	Reduce 74
118	!=	Reduce 74
118	<	Reduce 74
118	<=	Reduce 74
118	>	Reduce 74
118	>=	Reduce 74
118	,	Reduce 74
118	)	Reduce 74
118	then	Reduce 74
118	else	Reduce 74
118	end	Reduce 74
118	+	Shift 82
118	-	Shift 83
119	$	Reduce 76
119	;	Reduce 76
119	}	Reduce 76
119	:=	Reduce 76
119	identifier	Reduce 76
119	integer	Reduce 76
119	string	Reduce 76
119	boolean	Reduce 76
119	(	Reduce 76
119	[	Reduce 76
119	{	Reduce 76
119	or	Reduce 76
119	and	Reduce 76
119	==	Reduce 76
119	!=	Reduce 76
119	<	Reduce 76
119	<=	Reduce 76
119	>	Reduce 76
119	>=	Reduce 76
119	,	Reduce 76
119	)	Reduce 76
119	then	Reduce 76
119	else	Reduce 76
119	end	Reduce 76
119	+	Shift 82
119	-	Shift 83
120	$	Reduce 75
120	;	Reduce 75
120	}	Reduce 75
120	:=	Reduce 75
120	identifier	Reduce 75
120	integer	Reduce 75
120	string	Reduce 75
120	boolean	Reduce 75
120	(	Reduce 75
120	[	Reduce 75
120	{	Reduce 75
120	or	Reduce 75
120	and	Reduce 75
120	==	Reduce 75
120	!=	Reduce 75
120	<	Reduce 75
120	<=	Reduce 75
120	>	Reduce 75
120	>=	Reduce 75
120	,	Reduce 75
120	)	Reduce 75
120	then	Reduce 75
120	else	Reduce 75
120	end	Reduce 75
120	+	Shift 82
120	-	Shift 83
121	$	Reduce 77
121	;	Reduce 77
121	}	Reduce 77
121	:=	Reduce 77
121	identifier	Reduce 77
121	integer	Reduce 77
121	string	Reduce 77
121	boolean	Reduce 77
121	(	Reduce 77
121	[	Reduce 77
121	{	Reduce 77
121	or	Reduce 77
121	and	Reduce 77
121	==	Reduce 77
121	!=	Reduce 77
121	<	Reduce 77
121	<=	Reduce 77
121	>	Reduce 77
121	>=	Reduce 77
121	,	Reduce 77
121	)	Reduce 77
121	then	Reduce 77
121	else	Reduce 77
121	end	Reduce 77
121	+	Shift 82
121	-	Shift 83
122	$	Reduce 79
122	;	Reduce 79
122	}	Reduce 79
122	:=	Reduce 79
122	identifier	Reduce 79
122	integer	Reduce 79
122	string	Reduce 79
122	boolean	Reduce 79
122	(	Reduce 79
122	[	Reduce 79
122	{	Reduce 79
122	or	Reduce 79
122	and	Reduce 79
122	==	Reduce 79
122	!=	Reduce 79
122	<	Reduce 79
122	<=	Reduce 79
122	>	Reduce 79
122	>=	Reduce 79
122	+	Reduce 79
122	-	Reduce 79
122	,	Reduce 79
122	)	Reduce 79
122	then	Reduce 79
122	else	Reduce 79
122	end	Reduce 79
122	*	Shift 84
122	/	Shift 85
123	$	Reduce 80
123	;	Reduce 80
123	}	Reduce 80
123	:=	Reduce 80
123	identifier	Reduce 80
123	integer	Reduce 80
123	string	Reduce 80
123	boolean	Reduce 80
123	(	Reduce 80
123	[	Reduce 80
123	{	Reduce 80
123	or	Reduce 80
123	and	Reduce 80
123	==	Reduce 80
123	!=	Reduce 80
123	<	Reduce 80
123	<=	Reduce 80
123	>	Reduce 80
123	>=	Reduce 80
123	+	Reduce 80
123	-	Reduce 80
123	,	Reduce 80
123	)	Reduce 80
123	then	Reduce 80
123	else	Reduce 80
123	end	Reduce 80
123	*	Shift 84
123	/	Shift 85
124	$	Reduce 82
124	;	Reduce 82
124	}	Reduce 82
124	:=	Reduce 82
124	identifier	Reduce 82
124	integer	Reduce 82
124	string	Reduce 82
124	boolean	Reduce 82
124	(	Reduce 82
124	[	Reduce 82
124	{	Reduce 82
124	or	Reduce 82
124	and	Reduce 82
124	==	Reduce 82
124	!=	Reduce 82
124	<	Reduce 82
124	<=	Reduce 82
124	>	Reduce 82
124	>=	Reduce 82
124	+	Reduce 82
124	-	Reduce 82
124	*	Reduce 82
124	/	Reduce 82
124	,	Reduce 82
124	)	Reduce 82
124	then	Reduce 82
124	else	Reduce 82
124	end	Reduce 82
125	$	Reduce 83
125	;	Reduce 83
125	}	Reduce 83
125	:=	Reduce 83
125	identifier	Reduce 83
125	integer	Reduce 83
125	string	Reduce 83
125	boolean	Reduce 83
125	(	Reduce 83
125	[	Reduce 83
125	{	Reduce 83
125	or	Reduce 83
125	and	Reduce 83
125	==	Reduce 83
125	!=	Reduce 83
125	<	Reduce 83
125	<=	Reduce 83
125	>	Reduce 83
125	>=	Reduce 83
125	+	Reduce 83
125	-	Reduce 83
125	*	Reduce 83
125	/	Reduce 83
125	,	Reduce 83
125	)	Reduce 83
125	then	Reduce 83
125	else	Reduce 83
125	end	Reduce 83
126	.	Shift 148
127	.	Shift 149
128	{	Shift 46
128	[	Shift 47
128	\	Shift 49
128	let	Shift 50
128	if	Shift 51
128	case	Shift 52
128	(	Shift 48
128	LogicNot	Shift 53
128	!	Shift 54
128	-	Shift 55
128	identifier	Shift 45
128	integer	Shift 56
128	string	Shift 57
128	boolean	Shift 58
129	$	Reduce 92
129	;	Reduce 92
129	}	Reduce 92
129	:=	Reduce 92
129	identifier	Reduce 92
129	integer	Reduce 92
129	string	Reduce 92
129	boolean	Reduce 92
129	(	Reduce 92
129	[	Reduce 92
129	{	Reduce 92
129	or	Reduce 92
129	and	Reduce 92
129	==	Reduce 92
129	!=	Reduce 92
129	<	Reduce 92
129	<=	Reduce 92
129	>	Reduce 92
129	>=	Reduce 92
129	+	Reduce 92
129	-	Reduce 92
129	*	Reduce 92
129	/	Reduce 92
129	,	Reduce 92
129	)	Reduce 92
129	then	Reduce 92
129	else	Reduce 92
129	end	Reduce 92
130	{	Shift 46
130	[	Shift 47
130	\	Shift 49
130	let	Shift 50
130	if	Shift 51
130	case	Shift 52
130	(	Shift 48
130	LogicNot	Shift 53
130	!	Shift 54
130	-	Shift 55
130	identifier	Shift 45
130	integer	Shift 56
130	string	Shift 57
130	boolean	Shift 58
131	.	Reduce 47
132	{	Shift 20
132	[	Shift 21
132	(	Shift 22
132	identifier	Shift 19
133	}	Reduce 37
133	;	Shift 154
134	}	Shift 155
135	{	Shift 46
135	[	Shift 47
135	\	Shift 49
135	let	Shift 50
135	if	Shift 51
135	case	Shift 52
135	(	Shift 48
135	LogicNot	Shift 53
135	!	Shift 54
135	-	Shift 55
135	identifier	Shift 45
135	integer	Shift 56
135	string	Shift 57
135	boolean	Shift 58
136	identifier	Shift 159
136	(	Shift 160
137	}	Shift 161
138	>	Shift 162
139	.	Reduce 49
139	identifier	Reduce 49
139	>	Reduce 49
140	]	Reduce 11
140	}	Reduce 11
140	|	Reduce 11
140	=	Reduce 11
140	LocFun	Reduce 11
140	)	Reduce 11
140	,	Reduce 11
140	>	Reduce 11
140	{	Reduce 11
140	[	Reduce 11
140	(	Reduce 11
140	identifier	Reduce 11
140	@	Reduce 11
141	]	Reduce 12
141	}	Reduce 12
141	|	Reduce 12
141	=	Reduce 12
141	LocFun	Reduce 12
141	)	Reduce 12
141	,	Reduce 12
141	>	Reduce 12
141	{	Reduce 12
141	[	Reduce 12
141	(	Reduce 12
141	identifier	Reduce 12
141	@	Reduce 12
142	{	Shift 20
142	[	Shift 21
142	(	Shift 22
142	identifier	Shift 19
143	]	Reduce 20
143	}	Reduce 20
143	|	Reduce 20
143	=	Reduce 20
143	LocFun	Reduce 20
143	)	Reduce 20
143	,	Reduce 20
143	>	Reduce 20
143	{	Reduce 20
143	[	Reduce 20
143	(	Reduce 20
143	identifier	Reduce 20
143	@	Reduce 20
144	}	Reduce 35
145	$	Reduce 56
145	;	Reduce 56
145	}	Reduce 56
145	identifier	Reduce 56
145	integer	Reduce 56
145	string	Reduce 56
145	boolean	Reduce 56
145	(	Reduce 56
145	[	Reduce 56
145	{	Reduce 56
145	,	Reduce 56
145	)	Reduce 56
145	else	Reduce 56
145	end	Reduce 56
145	then	Reduce 56
146	$	Reduce 55
146	;	Reduce 55
146	}	Reduce 55
146	identifier	Reduce 55
146	integer	Reduce 55
146	string	Reduce 55
146	boolean	Reduce 55
146	(	Reduce 55
146	[	Reduce 55
146	{	Reduce 55
146	,	Reduce 55
146	)	Reduce 55
146	else	Reduce 55
146	end	Reduce 55
146	then	Reduce 55
147	}	Shift 164
148	{	Shift 46
148	[	Shift 47
148	\	Shift 49
148	let	Shift 50
148	if	Shift 51
148	case	Shift 52
148	(	Shift 48
148	LogicNot	Shift 53
148	!	Shift 54
148	-	Shift 55
148	identifier	Shift 45
148	integer	Shift 56
148	string	Shift 57
148	boolean	Shift 58
149	{	Shift 46
149	[	Shift 47
149	\	Shift 49
149	let	Shift 50
149	if	Shift 51
149	case	Shift 52
149	(	Shift 48
149	LogicNot	Shift 53
149	!	Shift 54
149	-	Shift 55
149	identifier	Shift 45
149	integer	Shift 56
149	string	Shift 57
149	boolean	Shift 58
150	)	Reduce 60
150	,	Shift 167
151	)	Shift 168
152	$	Reduce 41
152	;	Reduce 41
152	}	Reduce 41
152	,	Reduce 41
152	)	Reduce 41
152	else	Reduce 41
152	end	Reduce 41
153	@	Shift 169
154	identifier	Shift 4
155	{	Shift 46
155	[	Shift 47
155	\	Shift 49
155	let	Shift 50
155	if	Shift 51
155	case	Shift 52
155	(	Shift 48
155	LogicNot	Shift 53
155	!	Shift 54
155	-	Shift 55
155	identifier	Shift 45
155	integer	Shift 56
155	string	Shift 57
155	boolean	Shift 58
156	else	Shift 172
157	}	Shift 173
158	}	Reduce 50
158	;	Shift 174
159	}	Reduce 1
159	identifier	Shift 10
159	=>	Reduce 3
160	)	Reduce 7
160	identifier	Shift 179
161	[	Shift 180
162	]	Reduce 27
162	}	Reduce 27
162	|	Reduce 27
162	=	Reduce 27
162	LocFun	Reduce 27
162	)	Reduce 27
162	,	Reduce 27
162	>	Reduce 27
162	{	Reduce 27
162	[	Reduce 27
162	(	Reduce 27
162	identifier	Reduce 27
162	@	Reduce 27
163	)	Reduce 22
164	[	Shift 181
165	$	Reduce 39
165	;	Reduce 39
165	}	Reduce 39
165	,	Reduce 39
165	)	Reduce 39
165	else	Reduce 39
165	end	Reduce 39
166	$	Reduce 40
166	;	Reduce 40
166	}	Reduce 40
166	,	Reduce 40
166	)	Reduce 40
166	else	Reduce 40
166	end	Reduce 40
167	{	Shift 46
167	[	Shift 47
167	\	Shift 49
167	let	Shift 50
167	if	Shift 51
167	case	Shift 52
167	(	Shift 48
167	LogicNot	Shift 53
167	!	Shift 54
167	-	Shift 55
167	identifier	Shift 45
167	integer	Shift 56
167	string	Shift 57
167	boolean	Shift 58
168	$	Reduce 59
168	;	Reduce 59
168	}	Reduce 59
168	identifier	Reduce 59
168	integer	Reduce 59
168	string	Reduce 59
168	boolean	Reduce 59
168	(	Reduce 59
168	[	Reduce 59
168	{	Reduce 59
168	,	Reduce 59
168	)	Reduce 59
168	then	Reduce 59
168	else	Reduce 59
168	end	Reduce 59
169	identifier	Shift 139
170	}	Reduce 38
171	end	Shift 184
172	{	Shift 46
172	[	Shift 47
172	\	Shift 49
172	let	Shift 50
172	if	Shift 51
172	case	Shift 52
172	(	Shift 48
172	LogicNot	Shift 53
172	!	Shift 54
172	-	Shift 55
172	identifier	Shift 45
172	integer	Shift 56
172	string	Shift 57
172	boolean	Shift 58
173	$	Reduce 44
173	;	Reduce 44
173	}	Reduce 44
173	,	Reduce 44
173	)	Reduce 44
173	else	Reduce 44
173	end	Reduce 44
174	identifier	Shift 187
174	(	Shift 160
175	}	Reduce 2
175	=>	Reduce 4
176	=>	Shift 188
177	)	Reduce 8
178	)	Shift 189
179	)	Reduce 5
179	,	Shift 190
180	{	Shift 20
180	[	Shift 21
180	(	Shift 22
180	identifier	Shift 19
181	{	Shift 20
181	[	Shift 21
181	(	Shift 22
181	identifier	Shift 19
182	)	Reduce 61
183	.	Reduce 48
183	identifier	Reduce 48
184	$	Reduce 42
184	;	Reduce 42
184	}	Reduce 42
184	,	Reduce 42
184	)	Reduce 42
184	else	Reduce 42
184	end	Reduce 42
185	$	Reduce 43
185	;	Reduce 43
185	}	Reduce 43
185	,	Reduce 43
185	)	Reduce 43
185	else	Reduce 43
185	end	Reduce 43
186	}	Reduce 51
187	=>	Reduce 3
187	identifier	Shift 10
188	{	Shift 46
188	[	Shift 47
188	\	Shift 49
188	let	Shift 50
188	if	Shift 51
188	case	Shift 52
188	(	Shift 48
188	LogicNot	Shift 53
188	!	Shift 54
188	-	Shift 55
188	identifier	Shift 45
188	integer	Shift 56
188	string	Shift 57
188	boolean	Shift 58
189	=>	Shift 195
190	identifier	Shift 179
191	]	Shift 197
192	]	Shift 198
193	=>	Reduce 4
194	}	Reduce 52
194	;	Reduce 52
195	{	Shift 46
195	[	Shift 47
195	\	Shift 49
195	let	Shift 50
195	if	Shift 51
195	case	Shift 52
195	(	Shift 48
195	LogicNot	Shift 53
195	!	Shift 54
195	-	Shift 55
195	identifier	Shift 45
195	integer	Shift 56
195	string	Shift 57
195	boolean	Shift 58
196	)	Reduce 6
197	LogicNot	Shift 53
197	!	Shift 54
197	-	Shift 55
197	identifier	Shift 45
197	integer	Shift 56
197	string	Shift 57
197	boolean	Shift 58
197	(	Shift 72
198	LogicNot	Shift 53
198	!	Shift 54
198	-	Shift 55
198	identifier	Shift 45
198	integer	Shift 56
198	string	Shift 57
198	boolean	Shift 58
198	(	Shift 72
199	}	Reduce 53
199	;	Reduce 53
200	$	Reduce 65
200	;	Reduce 65
200	}	Reduce 65
200	:=	Reduce 65
200	identifier	Reduce 65
200	integer	Reduce 65
200	string	Reduce 65
200	boolean	Reduce 65
200	(	Reduce 65
200	[	Reduce 65
200	{	Reduce 65
200	,	Reduce 65
200	)	Reduce 65
200	then	Reduce 65
200	else	Reduce 65
200	end	Reduce 65
201	$	Reduce 63
201	;	Reduce 63
201	}	Reduce 63
201	identifier	Reduce 63
201	integer	Reduce 63
201	string	Reduce 63
201	boolean	Reduce 63
201	(	Reduce 63
201	[	Reduce 63
201	{	Reduce 63
201	,	Reduce 63
201	)	Reduce 63
201	then	Reduce 63
201	else	Reduce 63
201	end	Reduce 63
