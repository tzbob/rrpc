0	identifier	Shift 4
0	data	Shift 5
1	$	Accept
2	$	Reduce 29
2	;	Shift 6
3	$	Reduce 31
3	;	Shift 7
4	:	Shift 8
5	identifier	Shift 9
6	identifier	Shift 4
6	data	Shift 5
7	identifier	Shift 4
7	data	Shift 5
8	{	Shift 18
8	[	Shift 19
8	(	Shift 20
8	identifier	Shift 17
9	=	Shift 21
10	$	Reduce 30
11	$	Reduce 32
12	=	Shift 22
13	=	Reduce 11
13	)	Reduce 11
13	,	Reduce 11
13	@	Reduce 11
14	$	Reduce 14
14	;	Reduce 14
14	|	Reduce 14
14	]	Reduce 14
14	=	Reduce 14
14	)	Reduce 14
14	,	Reduce 14
14	(	Reduce 14
14	identifier	Reduce 14
14	@	Reduce 14
14	LocFun	Shift 25
14	{	Shift 23
14	[	Shift 24
15	$	Reduce 16
15	;	Reduce 16
15	|	Reduce 16
15	]	Reduce 16
15	=	Reduce 16
15	LocFun	Reduce 16
15	{	Reduce 16
15	[	Reduce 16
15	)	Reduce 16
15	,	Reduce 16
15	(	Reduce 16
15	identifier	Reduce 16
15	@	Reduce 16
16	$	Reduce 19
16	;	Reduce 19
16	|	Reduce 19
16	]	Reduce 19
16	=	Reduce 19
16	LocFun	Reduce 19
16	{	Reduce 19
16	[	Reduce 19
16	)	Reduce 19
16	,	Reduce 19
16	(	Reduce 19
16	identifier	Reduce 19
16	@	Reduce 19
17	$	Reduce 21
17	;	Reduce 21
17	|	Reduce 21
17	]	Reduce 21
17	=	Reduce 21
17	LocFun	Reduce 21
17	{	Reduce 21
17	[	Reduce 21
17	)	Reduce 21
17	,	Reduce 21
17	(	Reduce 21
17	identifier	Reduce 21
17	@	Reduce 21
18	identifier	Shift 27
19	identifier	Shift 27
20	{	Shift 18
20	[	Shift 19
20	(	Shift 20
20	identifier	Shift 17
21	{	Shift 34
21	[	Shift 35
21	identifier	Shift 33
22	{	Shift 50
22	[	Shift 51
22	\	Shift 53
22	let	Shift 54
22	if	Shift 55
22	case	Shift 56
22	(	Shift 52
22	LogicNot	Shift 57
22	!	Shift 58
22	-	Shift 59
22	identifier	Shift 49
22	integer	Shift 60
22	string	Shift 61
22	boolean	Shift 62
23	identifier	Shift 27
24	(	Shift 20
24	identifier	Shift 17
25	(	Shift 20
25	identifier	Shift 17
26	}	Shift 68
27	}	Reduce 1
27	]	Reduce 1
27	=>	Reduce 1
27	identifier	Shift 27
28	]	Shift 70
29	)	Shift 72
29	,	Shift 71
30	$	Reduce 33
30	;	Reduce 33
31	$	Reduce 34
31	;	Reduce 34
32	$	Reduce 38
32	;	Reduce 38
32	|	Shift 73
33	$	Reduce 27
33	;	Reduce 27
33	|	Reduce 27
33	(	Shift 20
33	identifier	Shift 17
34	identifier	Shift 27
35	identifier	Shift 27
36	$	Reduce 40
36	;	Reduce 40
36	}	Reduce 40
37	$	Reduce 49
37	;	Reduce 49
37	}	Reduce 49
37	,	Reduce 49
37	)	Reduce 49
37	else	Reduce 49
37	end	Reduce 49
37	[	Shift 80
37	{	Shift 79
37	identifier	Shift 49
37	integer	Shift 60
37	string	Shift 61
37	boolean	Shift 62
37	(	Shift 81
38	$	Reduce 89
38	;	Reduce 89
38	}	Reduce 89
38	:=	Reduce 89
38	identifier	Reduce 89
38	integer	Reduce 89
38	string	Reduce 89
38	boolean	Reduce 89
38	(	Reduce 89
38	[	Reduce 89
38	{	Reduce 89
38	or	Reduce 89
38	and	Reduce 89
38	==	Reduce 89
38	!=	Reduce 89
38	<	Reduce 89
38	<=	Reduce 89
38	>	Reduce 89
38	>=	Reduce 89
38	+	Reduce 89
38	-	Reduce 89
38	*	Reduce 89
38	/	Reduce 89
38	,	Reduce 89
38	)	Reduce 89
38	then	Reduce 89
38	else	Reduce 89
38	end	Reduce 89
39	$	Reduce 60
39	;	Reduce 60
39	}	Reduce 60
39	identifier	Reduce 60
39	integer	Reduce 60
39	string	Reduce 60
39	boolean	Reduce 60
39	(	Reduce 60
39	[	Reduce 60
39	{	Reduce 60
39	,	Reduce 60
39	)	Reduce 60
39	then	Reduce 60
39	else	Reduce 60
39	end	Reduce 60
40	$	Reduce 61
40	;	Reduce 61
40	}	Reduce 61
40	identifier	Reduce 61
40	integer	Reduce 61
40	string	Reduce 61
40	boolean	Reduce 61
40	(	Reduce 61
40	[	Reduce 61
40	{	Reduce 61
40	,	Reduce 61
40	)	Reduce 61
40	then	Reduce 61
40	else	Reduce 61
40	end	Reduce 61
41	$	Reduce 65
41	;	Reduce 65
41	}	Reduce 65
41	identifier	Reduce 65
41	integer	Reduce 65
41	string	Reduce 65
41	boolean	Reduce 65
41	(	Reduce 65
41	[	Reduce 65
41	{	Reduce 65
41	,	Reduce 65
41	)	Reduce 65
41	then	Reduce 65
41	else	Reduce 65
41	end	Reduce 65
41	:=	Shift 82
42	$	Reduce 69
42	;	Reduce 69
42	}	Reduce 69
42	:=	Reduce 69
42	identifier	Reduce 69
42	integer	Reduce 69
42	string	Reduce 69
42	boolean	Reduce 69
42	(	Reduce 69
42	[	Reduce 69
42	{	Reduce 69
42	,	Reduce 69
42	)	Reduce 69
42	then	Reduce 69
42	else	Reduce 69
42	end	Reduce 69
42	or	Shift 83
43	$	Reduce 71
43	;	Reduce 71
43	}	Reduce 71
43	:=	Reduce 71
43	identifier	Reduce 71
43	integer	Reduce 71
43	string	Reduce 71
43	boolean	Reduce 71
43	(	Reduce 71
43	[	Reduce 71
43	{	Reduce 71
43	or	Reduce 71
43	,	Reduce 71
43	)	Reduce 71
43	then	Reduce 71
43	else	Reduce 71
43	end	Reduce 71
43	and	Shift 84
44	$	Reduce 73
44	;	Reduce 73
44	}	Reduce 73
44	:=	Reduce 73
44	identifier	Reduce 73
44	integer	Reduce 73
44	string	Reduce 73
44	boolean	Reduce 73
44	(	Reduce 73
44	[	Reduce 73
44	{	Reduce 73
44	or	Reduce 73
44	and	Reduce 73
44	,	Reduce 73
44	)	Reduce 73
44	then	Reduce 73
44	else	Reduce 73
44	end	Reduce 73
44	==	Shift 85
44	!=	Shift 86
45	$	Reduce 76
45	;	Reduce 76
45	}	Reduce 76
45	:=	Reduce 76
45	identifier	Reduce 76
45	integer	Reduce 76
45	string	Reduce 76
45	boolean	Reduce 76
45	(	Reduce 76
45	[	Reduce 76
45	{	Reduce 76
45	or	Reduce 76
45	and	Reduce 76
45	==	Reduce 76
45	!=	Reduce 76
45	,	Reduce 76
45	)	Reduce 76
45	then	Reduce 76
45	else	Reduce 76
45	end	Reduce 76
45	<	Shift 87
45	<=	Shift 88
45	>	Shift 89
45	>=	Shift 90
46	$	Reduce 81
46	;	Reduce 81
46	}	Reduce 81
46	:=	Reduce 81
46	identifier	Reduce 81
46	integer	Reduce 81
46	string	Reduce 81
46	boolean	Reduce 81
46	(	Reduce 81
46	[	Reduce 81
46	{	Reduce 81
46	or	Reduce 81
46	and	Reduce 81
46	==	Reduce 81
46	!=	Reduce 81
46	<	Reduce 81
46	<=	Reduce 81
46	>	Reduce 81
46	>=	Reduce 81
46	,	Reduce 81
46	)	Reduce 81
46	then	Reduce 81
46	else	Reduce 81
46	end	Reduce 81
46	+	Shift 91
46	-	Shift 92
47	$	Reduce 84
47	;	Reduce 84
47	}	Reduce 84
47	:=	Reduce 84
47	identifier	Reduce 84
47	integer	Reduce 84
47	string	Reduce 84
47	boolean	Reduce 84
47	(	Reduce 84
47	[	Reduce 84
47	{	Reduce 84
47	or	Reduce 84
47	and	Reduce 84
47	==	Reduce 84
47	!=	Reduce 84
47	<	Reduce 84
47	<=	Reduce 84
47	>	Reduce 84
47	>=	Reduce 84
47	+	Reduce 84
47	-	Reduce 84
47	,	Reduce 84
47	)	Reduce 84
47	then	Reduce 84
47	else	Reduce 84
47	end	Reduce 84
47	*	Shift 93
47	/	Shift 94
48	$	Reduce 87
48	;	Reduce 87
48	}	Reduce 87
48	:=	Reduce 87
48	identifier	Reduce 87
48	integer	Reduce 87
48	string	Reduce 87
48	boolean	Reduce 87
48	(	Reduce 87
48	[	Reduce 87
48	{	Reduce 87
48	or	Reduce 87
48	and	Reduce 87
48	==	Reduce 87
48	!=	Reduce 87
48	<	Reduce 87
48	<=	Reduce 87
48	>	Reduce 87
48	>=	Reduce 87
48	+	Reduce 87
48	-	Reduce 87
48	*	Reduce 87
48	/	Reduce 87
48	,	Reduce 87
48	)	Reduce 87
48	then	Reduce 87
48	else	Reduce 87
48	end	Reduce 87
49	$	Reduce 90
49	;	Reduce 90
49	}	Reduce 90
49	:=	Reduce 90
49	identifier	Reduce 90
49	integer	Reduce 90
49	string	Reduce 90
49	boolean	Reduce 90
49	(	Reduce 90
49	[	Reduce 90
49	{	Reduce 90
49	or	Reduce 90
49	and	Reduce 90
49	==	Reduce 90
49	!=	Reduce 90
49	<	Reduce 90
49	<=	Reduce 90
49	>	Reduce 90
49	>=	Reduce 90
49	+	Reduce 90
49	-	Reduce 90
49	*	Reduce 90
49	/	Reduce 90
49	,	Reduce 90
49	)	Reduce 90
49	then	Reduce 90
49	else	Reduce 90
49	end	Reduce 90
50	identifier	Shift 27
51	identifier	Shift 27
52	)	Shift 98
52	{	Shift 50
52	[	Shift 51
52	\	Shift 53
52	let	Shift 54
52	if	Shift 55
52	case	Shift 56
52	(	Shift 52
52	LogicNot	Shift 57
52	!	Shift 58
52	-	Shift 59
52	identifier	Shift 49
52	integer	Shift 60
52	string	Shift 61
52	boolean	Shift 62
53	identifier	Shift 101
54	{	Shift 102
55	(	Shift 52
55	LogicNot	Shift 57
55	!	Shift 58
55	-	Shift 59
55	identifier	Shift 49
55	integer	Shift 60
55	string	Shift 61
55	boolean	Shift 62
56	(	Shift 52
56	LogicNot	Shift 57
56	!	Shift 58
56	-	Shift 59
56	identifier	Shift 49
56	integer	Shift 60
56	string	Shift 61
56	boolean	Shift 62
57	$	Reduce 67
57	;	Reduce 67
57	}	Reduce 67
57	:=	Reduce 67
57	identifier	Reduce 67
57	integer	Reduce 67
57	string	Reduce 67
57	boolean	Reduce 67
57	(	Reduce 67
57	[	Reduce 67
57	{	Reduce 67
57	,	Reduce 67
57	)	Reduce 67
57	then	Reduce 67
57	else	Reduce 67
57	end	Reduce 67
58	{	Shift 105
59	identifier	Shift 49
59	integer	Shift 60
59	string	Shift 61
59	boolean	Shift 62
59	(	Shift 81
60	$	Reduce 91
60	;	Reduce 91
60	}	Reduce 91
60	:=	Reduce 91
60	identifier	Reduce 91
60	integer	Reduce 91
60	string	Reduce 91
60	boolean	Reduce 91
60	(	Reduce 91
60	[	Reduce 91
60	{	Reduce 91
60	or	Reduce 91
60	and	Reduce 91
60	==	Reduce 91
60	!=	Reduce 91
60	<	Reduce 91
60	<=	Reduce 91
60	>	Reduce 91
60	>=	Reduce 91
60	+	Reduce 91
60	-	Reduce 91
60	*	Reduce 91
60	/	Reduce 91
60	,	Reduce 91
60	)	Reduce 91
60	then	Reduce 91
60	else	Reduce 91
60	end	Reduce 91
61	$	Reduce 92
61	;	Reduce 92
61	}	Reduce 92
61	:=	Reduce 92
61	identifier	Reduce 92
61	integer	Reduce 92
61	string	Reduce 92
61	boolean	Reduce 92
61	(	Reduce 92
61	[	Reduce 92
61	{	Reduce 92
61	or	Reduce 92
61	and	Reduce 92
61	==	Reduce 92
61	!=	Reduce 92
61	<	Reduce 92
61	<=	Reduce 92
61	>	Reduce 92
61	>=	Reduce 92
61	+	Reduce 92
61	-	Reduce 92
61	*	Reduce 92
61	/	Reduce 92
61	,	Reduce 92
61	)	Reduce 92
61	then	Reduce 92
61	else	Reduce 92
61	end	Reduce 92
62	$	Reduce 93
62	;	Reduce 93
62	}	Reduce 93
62	:=	Reduce 93
62	identifier	Reduce 93
62	integer	Reduce 93
62	string	Reduce 93
62	boolean	Reduce 93
62	(	Reduce 93
62	[	Reduce 93
62	{	Reduce 93
62	or	Reduce 93
62	and	Reduce 93
62	==	Reduce 93
62	!=	Reduce 93
62	<	Reduce 93
62	<=	Reduce 93
62	>	Reduce 93
62	>=	Reduce 93
62	+	Reduce 93
62	-	Reduce 93
62	*	Reduce 93
62	/	Reduce 93
62	,	Reduce 93
62	)	Reduce 93
62	then	Reduce 93
62	else	Reduce 93
62	end	Reduce 93
63	}	Reduce 10
64	}	Shift 107
65	$	Reduce 25
65	;	Reduce 25
65	|	Reduce 25
65	]	Reduce 25
65	(	Shift 20
65	identifier	Shift 17
66	]	Shift 109
67	$	Reduce 15
67	;	Reduce 15
67	|	Reduce 15
67	]	Reduce 15
67	=	Reduce 15
67	)	Reduce 15
67	,	Reduce 15
67	(	Reduce 15
67	identifier	Reduce 15
67	@	Reduce 15
68	.	Shift 110
69	}	Reduce 2
69	]	Reduce 2
69	=>	Reduce 2
70	.	Shift 111
71	{	Shift 18
71	[	Shift 19
71	(	Shift 20
71	identifier	Shift 17
72	$	Reduce 20
72	;	Reduce 20
72	|	Reduce 20
72	]	Reduce 20
72	=	Reduce 20
72	LocFun	Reduce 20
72	{	Reduce 20
72	[	Reduce 20
72	)	Reduce 20
72	,	Reduce 20
72	(	Reduce 20
72	identifier	Reduce 20
72	@	Reduce 20
73	identifier	Shift 33
74	$	Reduce 28
74	;	Reduce 28
74	|	Reduce 28
75	$	Reduce 37
75	;	Reduce 37
75	|	Reduce 37
76	}	Shift 115
77	]	Shift 116
78	$	Reduce 57
78	;	Reduce 57
78	}	Reduce 57
78	identifier	Reduce 57
78	integer	Reduce 57
78	string	Reduce 57
78	boolean	Reduce 57
78	(	Reduce 57
78	[	Reduce 57
78	{	Reduce 57
78	,	Reduce 57
78	)	Reduce 57
78	else	Reduce 57
78	end	Reduce 57
78	then	Reduce 57
79	identifier	Shift 27
80	(	Shift 20
80	identifier	Shift 17
81	)	Shift 98
81	{	Shift 50
81	[	Shift 51
81	\	Shift 53
81	let	Shift 54
81	if	Shift 55
81	case	Shift 56
81	(	Shift 52
81	LogicNot	Shift 57
81	!	Shift 58
81	-	Shift 59
81	identifier	Shift 49
81	integer	Shift 60
81	string	Shift 61
81	boolean	Shift 62
82	{	Shift 120
83	-	Shift 59
83	identifier	Shift 49
83	integer	Shift 60
83	string	Shift 61
83	boolean	Shift 62
83	(	Shift 81
84	-	Shift 59
84	identifier	Shift 49
84	integer	Shift 60
84	string	Shift 61
84	boolean	Shift 62
84	(	Shift 81
85	-	Shift 59
85	identifier	Shift 49
85	integer	Shift 60
85	string	Shift 61
85	boolean	Shift 62
85	(	Shift 81
86	-	Shift 59
86	identifier	Shift 49
86	integer	Shift 60
86	string	Shift 61
86	boolean	Shift 62
86	(	Shift 81
87	-	Shift 59
87	identifier	Shift 49
87	integer	Shift 60
87	string	Shift 61
87	boolean	Shift 62
87	(	Shift 81
88	-	Shift 59
88	identifier	Shift 49
88	integer	Shift 60
88	string	Shift 61
88	boolean	Shift 62
88	(	Shift 81
89	-	Shift 59
89	identifier	Shift 49
89	integer	Shift 60
89	string	Shift 61
89	boolean	Shift 62
89	(	Shift 81
90	-	Shift 59
90	identifier	Shift 49
90	integer	Shift 60
90	string	Shift 61
90	boolean	Shift 62
90	(	Shift 81
91	-	Shift 59
91	identifier	Shift 49
91	integer	Shift 60
91	string	Shift 61
91	boolean	Shift 62
91	(	Shift 81
92	-	Shift 59
92	identifier	Shift 49
92	integer	Shift 60
92	string	Shift 61
92	boolean	Shift 62
92	(	Shift 81
93	-	Shift 59
93	identifier	Shift 49
93	integer	Shift 60
93	string	Shift 61
93	boolean	Shift 62
93	(	Shift 81
94	-	Shift 59
94	identifier	Shift 49
94	integer	Shift 60
94	string	Shift 61
94	boolean	Shift 62
94	(	Shift 81
95	}	Shift 133
96	]	Shift 134
97	,	Shift 135
97	)	Shift 136
98	$	Reduce 94
98	;	Reduce 94
98	}	Reduce 94
98	:=	Reduce 94
98	identifier	Reduce 94
98	integer	Reduce 94
98	string	Reduce 94
98	boolean	Reduce 94
98	(	Reduce 94
98	[	Reduce 94
98	{	Reduce 94
98	or	Reduce 94
98	and	Reduce 94
98	==	Reduce 94
98	!=	Reduce 94
98	<	Reduce 94
98	<=	Reduce 94
98	>	Reduce 94
98	>=	Reduce 94
98	+	Reduce 94
98	-	Reduce 94
98	*	Reduce 94
98	/	Reduce 94
98	,	Reduce 94
98	)	Reduce 94
98	then	Reduce 94
98	else	Reduce 94
98	end	Reduce 94
99	.	Shift 137
100	.	Reduce 50
100	identifier	Shift 101
101	:	Shift 139
102	identifier	Shift 4
103	then	Shift 142
103	[	Shift 80
103	{	Shift 79
103	identifier	Shift 49
103	integer	Shift 60
103	string	Shift 61
103	boolean	Shift 62
103	(	Shift 81
104	{	Shift 143
104	[	Shift 80
104	identifier	Shift 49
104	integer	Shift 60
104	string	Shift 61
104	boolean	Shift 62
104	(	Shift 81
105	identifier	Shift 27
106	$	Reduce 88
106	;	Reduce 88
106	}	Reduce 88
106	:=	Reduce 88
106	identifier	Reduce 88
106	integer	Reduce 88
106	string	Reduce 88
106	boolean	Reduce 88
106	(	Reduce 88
106	[	Reduce 88
106	{	Reduce 88
106	or	Reduce 88
106	and	Reduce 88
106	==	Reduce 88
106	!=	Reduce 88
106	<	Reduce 88
106	<=	Reduce 88
106	>	Reduce 88
106	>=	Reduce 88
106	+	Reduce 88
106	-	Reduce 88
106	*	Reduce 88
106	/	Reduce 88
106	,	Reduce 88
106	)	Reduce 88
106	then	Reduce 88
106	else	Reduce 88
106	end	Reduce 88
107	$	Reduce 17
107	;	Reduce 17
107	|	Reduce 17
107	]	Reduce 17
107	=	Reduce 17
107	LocFun	Reduce 17
107	{	Reduce 17
107	[	Reduce 17
107	)	Reduce 17
107	,	Reduce 17
107	(	Reduce 17
107	identifier	Reduce 17
107	@	Reduce 17
108	$	Reduce 26
108	;	Reduce 26
108	|	Reduce 26
108	]	Reduce 26
109	$	Reduce 18
109	;	Reduce 18
109	|	Reduce 18
109	]	Reduce 18
109	=	Reduce 18
109	LocFun	Reduce 18
109	{	Reduce 18
109	[	Reduce 18
109	)	Reduce 18
109	,	Reduce 18
109	(	Reduce 18
109	identifier	Reduce 18
109	@	Reduce 18
110	{	Shift 18
110	[	Shift 19
110	(	Shift 20
110	identifier	Shift 17
111	{	Shift 18
111	[	Shift 19
111	(	Shift 20
111	identifier	Shift 17
112	)	Reduce 23
112	,	Shift 147
113	)	Shift 148
114	$	Reduce 39
114	;	Reduce 39
115	.	Shift 149
116	.	Shift 150
117	}	Shift 151
118	]	Shift 152
119	)	Shift 136
120	identifier	Shift 27
121	$	Reduce 70
121	;	Reduce 70
121	}	Reduce 70
121	:=	Reduce 70
121	identifier	Reduce 70
121	integer	Reduce 70
121	string	Reduce 70
121	boolean	Reduce 70
121	(	Reduce 70
121	[	Reduce 70
121	{	Reduce 70
121	or	Reduce 70
121	,	Reduce 70
121	)	Reduce 70
121	then	Reduce 70
121	else	Reduce 70
121	end	Reduce 70
121	and	Shift 84
122	$	Reduce 72
122	;	Reduce 72
122	}	Reduce 72
122	:=	Reduce 72
122	identifier	Reduce 72
122	integer	Reduce 72
122	string	Reduce 72
122	boolean	Reduce 72
122	(	Reduce 72
122	[	Reduce 72
122	{	Reduce 72
122	or	Reduce 72
122	and	Reduce 72
122	,	Reduce 72
122	)	Reduce 72
122	then	Reduce 72
122	else	Reduce 72
122	end	Reduce 72
122	==	Shift 85
122	!=	Shift 86
123	$	Reduce 74
123	;	Reduce 74
123	}	Reduce 74
123	:=	Reduce 74
123	identifier	Reduce 74
123	integer	Reduce 74
123	string	Reduce 74
123	boolean	Reduce 74
123	(	Reduce 74
123	[	Reduce 74
123	{	Reduce 74
123	or	Reduce 74
123	and	Reduce 74
123	==	Reduce 74
123	!=	Reduce 74
123	,	Reduce 74
123	)	Reduce 74
123	then	Reduce 74
123	else	Reduce 74
123	end	Reduce 74
123	<	Shift 87
123	<=	Shift 88
123	>	Shift 89
123	>=	Shift 90
124	$	Reduce 75
124	;	Reduce 75
124	}	Reduce 75
124	:=	Reduce 75
124	identifier	Reduce 75
124	integer	Reduce 75
124	string	Reduce 75
124	boolean	Reduce 75
124	(	Reduce 75
124	[	Reduce 75
124	{	Reduce 75
124	or	Reduce 75
124	and	Reduce 75
124	==	Reduce 75
124	!=	Reduce 75
124	,	Reduce 75
124	)	Reduce 75
124	then	Reduce 75
124	else	Reduce 75
124	end	Reduce 75
124	<	Shift 87
124	<=	Shift 88
124	>	Shift 89
124	>=	Shift 90
125	$	Reduce 77
125	;	Reduce 77
125	}	Reduce 77
125	:=	Reduce 77
125	identifier	Reduce 77
125	integer	Reduce 77
125	string	Reduce 77
125	boolean	Reduce 77
125	(	Reduce 77
125	[	Reduce 77
125	{	Reduce 77
125	or	Reduce 77
125	and	Reduce 77
125	==	Reduce 77
125	!=	Reduce 77
125	<	Reduce 77
125	<=	Reduce 77
125	>	Reduce 77
125	>=	Reduce 77
125	,	Reduce 77
125	)	Reduce 77
125	then	Reduce 77
125	else	Reduce 77
125	end	Reduce 77
125	+	Shift 91
125	-	Shift 92
126	$	Reduce 78
126	;	Reduce 78
126	}	Reduce 78
126	:=	Reduce 78
126	identifier	Reduce 78
126	integer	Reduce 78
126	string	Reduce 78
126	boolean	Reduce 78
126	(	Reduce 78
126	[	Reduce 78
126	{	Reduce 78
126	or	Reduce 78
126	and	Reduce 78
126	==	Reduce 78
126	!=	Reduce 78
126	<	Reduce 78
126	<=	Reduce 78
126	>	Reduce 78
126	>=	Reduce 78
126	,	Reduce 78
126	)	Reduce 78
126	then	Reduce 78
126	else	Reduce 78
126	end	Reduce 78
126	+	Shift 91
126	-	Shift 92
127	$	Reduce 79
127	;	Reduce 79
127	}	Reduce 79
127	:=	Reduce 79
127	identifier	Reduce 79
127	integer	Reduce 79
127	string	Reduce 79
127	boolean	Reduce 79
127	(	Reduce 79
127	[	Reduce 79
127	{	Reduce 79
127	or	Reduce 79
127	and	Reduce 79
127	==	Reduce 79
127	!=	Reduce 79
127	<	Reduce 79
127	<=	Reduce 79
127	>	Reduce 79
127	>=	Reduce 79
127	,	Reduce 79
127	)	Reduce 79
127	then	Reduce 79
127	else	Reduce 79
127	end	Reduce 79
127	+	Shift 91
127	-	Shift 92
128	$	Reduce 80
128	;	Reduce 80
128	}	Reduce 80
128	:=	Reduce 80
128	identifier	Reduce 80
128	integer	Reduce 80
128	string	Reduce 80
128	boolean	Reduce 80
128	(	Reduce 80
128	[	Reduce 80
128	{	Reduce 80
128	or	Reduce 80
128	and	Reduce 80
128	==	Reduce 80
128	!=	Reduce 80
128	<	Reduce 80
128	<=	Reduce 80
128	>	Reduce 80
128	>=	Reduce 80
128	,	Reduce 80
128	)	Reduce 80
128	then	Reduce 80
128	else	Reduce 80
128	end	Reduce 80
128	+	Shift 91
128	-	Shift 92
129	$	Reduce 82
129	;	Reduce 82
129	}	Reduce 82
129	:=	Reduce 82
129	identifier	Reduce 82
129	integer	Reduce 82
129	string	Reduce 82
129	boolean	Reduce 82
129	(	Reduce 82
129	[	Reduce 82
129	{	Reduce 82
129	or	Reduce 82
129	and	Reduce 82
129	==	Reduce 82
129	!=	Reduce 82
129	<	Reduce 82
129	<=	Reduce 82
129	>	Reduce 82
129	>=	Reduce 82
129	+	Reduce 82
129	-	Reduce 82
129	,	Reduce 82
129	)	Reduce 82
129	then	Reduce 82
129	else	Reduce 82
129	end	Reduce 82
129	*	Shift 93
129	/	Shift 94
130	$	Reduce 83
130	;	Reduce 83
130	}	Reduce 83
130	:=	Reduce 83
130	identifier	Reduce 83
130	integer	Reduce 83
130	string	Reduce 83
130	boolean	Reduce 83
130	(	Reduce 83
130	[	Reduce 83
130	{	Reduce 83
130	or	Reduce 83
130	and	Reduce 83
130	==	Reduce 83
130	!=	Reduce 83
130	<	Reduce 83
130	<=	Reduce 83
130	>	Reduce 83
130	>=	Reduce 83
130	+	Reduce 83
130	-	Reduce 83
130	,	Reduce 83
130	)	Reduce 83
130	then	Reduce 83
130	else	Reduce 83
130	end	Reduce 83
130	*	Shift 93
130	/	Shift 94
131	$	Reduce 85
131	;	Reduce 85
131	}	Reduce 85
131	:=	Reduce 85
131	identifier	Reduce 85
131	integer	Reduce 85
131	string	Reduce 85
131	boolean	Reduce 85
131	(	Reduce 85
131	[	Reduce 85
131	{	Reduce 85
131	or	Reduce 85
131	and	Reduce 85
131	==	Reduce 85
131	!=	Reduce 85
131	<	Reduce 85
131	<=	Reduce 85
131	>	Reduce 85
131	>=	Reduce 85
131	+	Reduce 85
131	-	Reduce 85
131	*	Reduce 85
131	/	Reduce 85
131	,	Reduce 85
131	)	Reduce 85
131	then	Reduce 85
131	else	Reduce 85
131	end	Reduce 85
132	$	Reduce 86
132	;	Reduce 86
132	}	Reduce 86
132	:=	Reduce 86
132	identifier	Reduce 86
132	integer	Reduce 86
132	string	Reduce 86
132	boolean	Reduce 86
132	(	Reduce 86
132	[	Reduce 86
132	{	Reduce 86
132	or	Reduce 86
132	and	Reduce 86
132	==	Reduce 86
132	!=	Reduce 86
132	<	Reduce 86
132	<=	Reduce 86
132	>	Reduce 86
132	>=	Reduce 86
132	+	Reduce 86
132	-	Reduce 86
132	*	Reduce 86
132	/	Reduce 86
132	,	Reduce 86
132	)	Reduce 86
132	then	Reduce 86
132	else	Reduce 86
132	end	Reduce 86
133	.	Shift 154
134	.	Shift 155
135	{	Shift 50
135	[	Shift 51
135	\	Shift 53
135	let	Shift 54
135	if	Shift 55
135	case	Shift 56
135	(	Shift 52
135	LogicNot	Shift 57
135	!	Shift 58
135	-	Shift 59
135	identifier	Shift 49
135	integer	Shift 60
135	string	Shift 61
135	boolean	Shift 62
136	$	Reduce 95
136	;	Reduce 95
136	}	Reduce 95
136	:=	Reduce 95
136	identifier	Reduce 95
136	integer	Reduce 95
136	string	Reduce 95
136	boolean	Reduce 95
136	(	Reduce 95
136	[	Reduce 95
136	{	Reduce 95
136	or	Reduce 95
136	and	Reduce 95
136	==	Reduce 95
136	!=	Reduce 95
136	<	Reduce 95
136	<=	Reduce 95
136	>	Reduce 95
136	>=	Reduce 95
136	+	Reduce 95
136	-	Reduce 95
136	*	Reduce 95
136	/	Reduce 95
136	,	Reduce 95
136	)	Reduce 95
136	then	Reduce 95
136	else	Reduce 95
136	end	Reduce 95
137	{	Shift 50
137	[	Shift 51
137	\	Shift 53
137	let	Shift 54
137	if	Shift 55
137	case	Shift 56
137	(	Shift 52
137	LogicNot	Shift 57
137	!	Shift 58
137	-	Shift 59
137	identifier	Shift 49
137	integer	Shift 60
137	string	Shift 61
137	boolean	Shift 62
138	.	Reduce 51
139	{	Shift 18
139	[	Shift 19
139	(	Shift 20
139	identifier	Shift 17
140	}	Reduce 41
140	;	Shift 160
141	}	Shift 161
142	{	Shift 50
142	[	Shift 51
142	\	Shift 53
142	let	Shift 54
142	if	Shift 55
142	case	Shift 56
142	(	Shift 52
142	LogicNot	Shift 57
142	!	Shift 58
142	-	Shift 59
142	identifier	Shift 49
142	integer	Shift 60
142	string	Shift 61
142	boolean	Shift 62
143	identifier	Shift 165
143	(	Shift 166
144	}	Shift 167
145	=	Reduce 12
145	)	Reduce 12
145	,	Reduce 12
145	@	Reduce 12
146	=	Reduce 13
146	)	Reduce 13
146	,	Reduce 13
146	@	Reduce 13
147	{	Shift 18
147	[	Shift 19
147	(	Shift 20
147	identifier	Shift 17
148	$	Reduce 22
148	;	Reduce 22
148	|	Reduce 22
148	]	Reduce 22
148	=	Reduce 22
148	LocFun	Reduce 22
148	{	Reduce 22
148	[	Reduce 22
148	)	Reduce 22
148	,	Reduce 22
148	(	Reduce 22
148	identifier	Reduce 22
148	@	Reduce 22
149	{	Shift 34
149	[	Shift 35
149	identifier	Shift 33
150	{	Shift 34
150	[	Shift 35
150	identifier	Shift 33
151	$	Reduce 59
151	;	Reduce 59
151	}	Reduce 59
151	identifier	Reduce 59
151	integer	Reduce 59
151	string	Reduce 59
151	boolean	Reduce 59
151	(	Reduce 59
151	[	Reduce 59
151	{	Reduce 59
151	,	Reduce 59
151	)	Reduce 59
151	else	Reduce 59
151	end	Reduce 59
151	then	Reduce 59
152	$	Reduce 58
152	;	Reduce 58
152	}	Reduce 58
152	identifier	Reduce 58
152	integer	Reduce 58
152	string	Reduce 58
152	boolean	Reduce 58
152	(	Reduce 58
152	[	Reduce 58
152	{	Reduce 58
152	,	Reduce 58
152	)	Reduce 58
152	else	Reduce 58
152	end	Reduce 58
152	then	Reduce 58
153	}	Shift 171
154	{	Shift 50
154	[	Shift 51
154	\	Shift 53
154	let	Shift 54
154	if	Shift 55
154	case	Shift 56
154	(	Shift 52
154	LogicNot	Shift 57
154	!	Shift 58
154	-	Shift 59
154	identifier	Shift 49
154	integer	Shift 60
154	string	Shift 61
154	boolean	Shift 62
155	{	Shift 50
155	[	Shift 51
155	\	Shift 53
155	let	Shift 54
155	if	Shift 55
155	case	Shift 56
155	(	Shift 52
155	LogicNot	Shift 57
155	!	Shift 58
155	-	Shift 59
155	identifier	Shift 49
155	integer	Shift 60
155	string	Shift 61
155	boolean	Shift 62
156	)	Reduce 63
156	,	Shift 174
157	)	Shift 175
158	$	Reduce 45
158	;	Reduce 45
158	}	Reduce 45
158	,	Reduce 45
158	)	Reduce 45
158	else	Reduce 45
158	end	Reduce 45
159	@	Shift 176
160	identifier	Shift 4
161	{	Shift 50
161	[	Shift 51
161	\	Shift 53
161	let	Shift 54
161	if	Shift 55
161	case	Shift 56
161	(	Shift 52
161	LogicNot	Shift 57
161	!	Shift 58
161	-	Shift 59
161	identifier	Shift 49
161	integer	Shift 60
161	string	Shift 61
161	boolean	Shift 62
162	else	Shift 179
163	}	Shift 180
164	}	Reduce 53
164	;	Shift 181
165	}	Reduce 1
165	identifier	Shift 27
165	=>	Reduce 3
166	)	Reduce 7
166	identifier	Shift 186
167	[	Shift 187
168	)	Reduce 24
169	$	Reduce 35
169	;	Reduce 35
170	$	Reduce 36
170	;	Reduce 36
171	[	Shift 188
172	$	Reduce 43
172	;	Reduce 43
172	}	Reduce 43
172	,	Reduce 43
172	)	Reduce 43
172	else	Reduce 43
172	end	Reduce 43
173	$	Reduce 44
173	;	Reduce 44
173	}	Reduce 44
173	,	Reduce 44
173	)	Reduce 44
173	else	Reduce 44
173	end	Reduce 44
174	{	Shift 50
174	[	Shift 51
174	\	Shift 53
174	let	Shift 54
174	if	Shift 55
174	case	Shift 56
174	(	Shift 52
174	LogicNot	Shift 57
174	!	Shift 58
174	-	Shift 59
174	identifier	Shift 49
174	integer	Shift 60
174	string	Shift 61
174	boolean	Shift 62
175	$	Reduce 62
175	;	Reduce 62
175	}	Reduce 62
175	identifier	Reduce 62
175	integer	Reduce 62
175	string	Reduce 62
175	boolean	Reduce 62
175	(	Reduce 62
175	[	Reduce 62
175	{	Reduce 62
175	,	Reduce 62
175	)	Reduce 62
175	then	Reduce 62
175	else	Reduce 62
175	end	Reduce 62
176	identifier	Shift 191
177	}	Reduce 42
178	end	Shift 192
179	{	Shift 50
179	[	Shift 51
179	\	Shift 53
179	let	Shift 54
179	if	Shift 55
179	case	Shift 56
179	(	Shift 52
179	LogicNot	Shift 57
179	!	Shift 58
179	-	Shift 59
179	identifier	Shift 49
179	integer	Shift 60
179	string	Shift 61
179	boolean	Shift 62
180	$	Reduce 48
180	;	Reduce 48
180	}	Reduce 48
180	,	Reduce 48
180	)	Reduce 48
180	else	Reduce 48
180	end	Reduce 48
181	identifier	Shift 195
181	(	Shift 166
182	}	Reduce 2
182	=>	Reduce 4
183	=>	Shift 196
184	)	Reduce 8
185	)	Shift 197
186	)	Reduce 5
186	,	Shift 198
187	(	Shift 20
187	identifier	Shift 17
188	(	Shift 20
188	identifier	Shift 17
189	)	Reduce 64
190	.	Reduce 52
190	identifier	Reduce 52
191	.	Reduce 9
191	identifier	Reduce 9
192	$	Reduce 46
192	;	Reduce 46
192	}	Reduce 46
192	,	Reduce 46
192	)	Reduce 46
192	else	Reduce 46
192	end	Reduce 46
193	$	Reduce 47
193	;	Reduce 47
193	}	Reduce 47
193	,	Reduce 47
193	)	Reduce 47
193	else	Reduce 47
193	end	Reduce 47
194	}	Reduce 54
195	=>	Reduce 3
195	identifier	Shift 27
196	{	Shift 50
196	[	Shift 51
196	\	Shift 53
196	let	Shift 54
196	if	Shift 55
196	case	Shift 56
196	(	Shift 52
196	LogicNot	Shift 57
196	!	Shift 58
196	-	Shift 59
196	identifier	Shift 49
196	integer	Shift 60
196	string	Shift 61
196	boolean	Shift 62
197	=>	Shift 203
198	identifier	Shift 186
199	]	Shift 205
200	]	Shift 206
201	=>	Reduce 4
202	}	Reduce 55
202	;	Reduce 55
203	{	Shift 50
203	[	Shift 51
203	\	Shift 53
203	let	Shift 54
203	if	Shift 55
203	case	Shift 56
203	(	Shift 52
203	LogicNot	Shift 57
203	!	Shift 58
203	-	Shift 59
203	identifier	Shift 49
203	integer	Shift 60
203	string	Shift 61
203	boolean	Shift 62
204	)	Reduce 6
205	LogicNot	Shift 57
205	!	Shift 58
205	-	Shift 59
205	identifier	Shift 49
205	integer	Shift 60
205	string	Shift 61
205	boolean	Shift 62
205	(	Shift 81
206	LogicNot	Shift 57
206	!	Shift 58
206	-	Shift 59
206	identifier	Shift 49
206	integer	Shift 60
206	string	Shift 61
206	boolean	Shift 62
206	(	Shift 81
207	}	Reduce 56
207	;	Reduce 56
208	$	Reduce 68
208	;	Reduce 68
208	}	Reduce 68
208	:=	Reduce 68
208	identifier	Reduce 68
208	integer	Reduce 68
208	string	Reduce 68
208	boolean	Reduce 68
208	(	Reduce 68
208	[	Reduce 68
208	{	Reduce 68
208	,	Reduce 68
208	)	Reduce 68
208	then	Reduce 68
208	else	Reduce 68
208	end	Reduce 68
209	$	Reduce 66
209	;	Reduce 66
209	}	Reduce 66
209	identifier	Reduce 66
209	integer	Reduce 66
209	string	Reduce 66
209	boolean	Reduce 66
209	(	Reduce 66
209	[	Reduce 66
209	{	Reduce 66
209	,	Reduce 66
209	)	Reduce 66
209	then	Reduce 66
209	else	Reduce 66
209	end	Reduce 66
