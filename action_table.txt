0	identifier	Shift 4
0	data	Shift 5
1	$	Accept
2	$	Reduce 22
2	;	Shift 6
3	$	Reduce 24
3	;	Shift 7
4	:	Shift 8
5	identifier	Shift 10
6	identifier	Shift 4
6	data	Shift 5
7	identifier	Shift 4
7	data	Shift 5
8	{	Shift 19
8	[	Shift 20
8	(	Shift 21
8	identifier	Shift 18
9	=	Shift 22
10	=	Reduce 1
10	}	Reduce 1
10	]	Reduce 1
10	=>	Reduce 1
10	identifier	Shift 10
11	$	Reduce 23
12	$	Reduce 25
13	=	Shift 24
14	}	Reduce 5
14	|	Reduce 5
14	=	Reduce 5
14	)	Reduce 5
14	,	Reduce 5
14	>	Reduce 5
14	{	Reduce 5
14	[	Reduce 5
14	(	Reduce 5
14	identifier	Reduce 5
14	]	Reduce 5
14	@	Reduce 5
14	LocFun	Shift 25
15	}	Reduce 9
15	|	Reduce 9
15	=	Reduce 9
15	LocFun	Reduce 9
15	)	Reduce 9
15	,	Reduce 9
15	>	Reduce 9
15	{	Reduce 9
15	[	Reduce 9
15	(	Reduce 9
15	identifier	Reduce 9
15	]	Reduce 9
15	@	Reduce 9
16	}	Reduce 10
16	|	Reduce 10
16	=	Reduce 10
16	LocFun	Reduce 10
16	)	Reduce 10
16	,	Reduce 10
16	>	Reduce 10
16	{	Reduce 10
16	[	Reduce 10
16	(	Reduce 10
16	identifier	Reduce 10
16	]	Reduce 10
16	@	Reduce 10
17	}	Reduce 12
17	|	Reduce 12
17	=	Reduce 12
17	LocFun	Reduce 12
17	)	Reduce 12
17	,	Reduce 12
17	>	Reduce 12
17	{	Reduce 12
17	[	Reduce 12
17	(	Reduce 12
17	identifier	Reduce 12
17	]	Reduce 12
17	@	Reduce 12
18	}	Reduce 13
18	|	Reduce 13
18	=	Reduce 13
18	LocFun	Reduce 13
18	)	Reduce 13
18	,	Reduce 13
18	>	Reduce 13
18	{	Reduce 13
18	[	Reduce 13
18	(	Reduce 13
18	identifier	Reduce 13
18	]	Reduce 13
18	@	Reduce 13
18	<	Shift 26
19	identifier	Shift 10
20	identifier	Shift 10
21	{	Shift 19
21	[	Shift 20
21	(	Shift 21
21	identifier	Shift 18
22	{	Shift 30
23	=	Reduce 2
23	}	Reduce 2
23	]	Reduce 2
23	=>	Reduce 2
24	{	Shift 45
24	[	Shift 46
24	\	Shift 48
24	let	Shift 49
24	if	Shift 50
24	case	Shift 51
24	(	Shift 47
24	!	Shift 52
24	-	Shift 53
24	identifier	Shift 44
24	integer	Shift 54
24	string	Shift 55
24	boolean	Shift 56
25	{	Shift 19
25	[	Shift 20
25	(	Shift 21
25	identifier	Shift 18
26	{	Shift 19
26	[	Shift 20
26	(	Shift 21
26	identifier	Shift 18
27	}	Shift 60
28	]	Shift 61
29	)	Shift 62
29	,	Shift 63
30	identifier	Shift 66
31	$	Reduce 30
31	;	Reduce 30
31	}	Reduce 30
32	$	Reduce 39
32	;	Reduce 39
32	}	Reduce 39
32	,	Reduce 39
32	)	Reduce 39
32	else	Reduce 39
32	end	Reduce 39
32	[	Shift 69
32	{	Shift 68
32	identifier	Shift 44
32	integer	Shift 54
32	string	Shift 55
32	boolean	Shift 56
32	(	Shift 70
33	$	Reduce 77
33	;	Reduce 77
33	}	Reduce 77
33	identifier	Reduce 77
33	integer	Reduce 77
33	string	Reduce 77
33	boolean	Reduce 77
33	(	Reduce 77
33	[	Reduce 77
33	{	Reduce 77
33	or	Reduce 77
33	and	Reduce 77
33	==	Reduce 77
33	!=	Reduce 77
33	<	Reduce 77
33	<=	Reduce 77
33	>	Reduce 77
33	>=	Reduce 77
33	+	Reduce 77
33	-	Reduce 77
33	*	Reduce 77
33	/	Reduce 77
33	,	Reduce 77
33	)	Reduce 77
33	then	Reduce 77
33	else	Reduce 77
33	end	Reduce 77
34	$	Reduce 50
34	;	Reduce 50
34	}	Reduce 50
34	identifier	Reduce 50
34	integer	Reduce 50
34	string	Reduce 50
34	boolean	Reduce 50
34	(	Reduce 50
34	[	Reduce 50
34	{	Reduce 50
34	,	Reduce 50
34	)	Reduce 50
34	then	Reduce 50
34	else	Reduce 50
34	end	Reduce 50
35	$	Reduce 51
35	;	Reduce 51
35	}	Reduce 51
35	identifier	Reduce 51
35	integer	Reduce 51
35	string	Reduce 51
35	boolean	Reduce 51
35	(	Reduce 51
35	[	Reduce 51
35	{	Reduce 51
35	,	Reduce 51
35	)	Reduce 51
35	then	Reduce 51
35	else	Reduce 51
35	end	Reduce 51
36	$	Reduce 55
36	;	Reduce 55
36	}	Reduce 55
36	identifier	Reduce 55
36	integer	Reduce 55
36	string	Reduce 55
36	boolean	Reduce 55
36	(	Reduce 55
36	[	Reduce 55
36	{	Reduce 55
36	,	Reduce 55
36	)	Reduce 55
36	then	Reduce 55
36	else	Reduce 55
36	end	Reduce 55
37	$	Reduce 57
37	;	Reduce 57
37	}	Reduce 57
37	identifier	Reduce 57
37	integer	Reduce 57
37	string	Reduce 57
37	boolean	Reduce 57
37	(	Reduce 57
37	[	Reduce 57
37	{	Reduce 57
37	,	Reduce 57
37	)	Reduce 57
37	then	Reduce 57
37	else	Reduce 57
37	end	Reduce 57
37	or	Shift 71
38	$	Reduce 59
38	;	Reduce 59
38	}	Reduce 59
38	identifier	Reduce 59
38	integer	Reduce 59
38	string	Reduce 59
38	boolean	Reduce 59
38	(	Reduce 59
38	[	Reduce 59
38	{	Reduce 59
38	or	Reduce 59
38	,	Reduce 59
38	)	Reduce 59
38	then	Reduce 59
38	else	Reduce 59
38	end	Reduce 59
38	and	Shift 72
39	$	Reduce 61
39	;	Reduce 61
39	}	Reduce 61
39	identifier	Reduce 61
39	integer	Reduce 61
39	string	Reduce 61
39	boolean	Reduce 61
39	(	Reduce 61
39	[	Reduce 61
39	{	Reduce 61
39	or	Reduce 61
39	and	Reduce 61
39	,	Reduce 61
39	)	Reduce 61
39	then	Reduce 61
39	else	Reduce 61
39	end	Reduce 61
39	==	Shift 73
39	!=	Shift 74
40	$	Reduce 64
40	;	Reduce 64
40	}	Reduce 64
40	identifier	Reduce 64
40	integer	Reduce 64
40	string	Reduce 64
40	boolean	Reduce 64
40	(	Reduce 64
40	[	Reduce 64
40	{	Reduce 64
40	or	Reduce 64
40	and	Reduce 64
40	==	Reduce 64
40	!=	Reduce 64
40	,	Reduce 64
40	)	Reduce 64
40	then	Reduce 64
40	else	Reduce 64
40	end	Reduce 64
40	<	Shift 75
40	<=	Shift 77
40	>	Shift 76
40	>=	Shift 78
41	$	Reduce 69
41	;	Reduce 69
41	}	Reduce 69
41	identifier	Reduce 69
41	integer	Reduce 69
41	string	Reduce 69
41	boolean	Reduce 69
41	(	Reduce 69
41	[	Reduce 69
41	{	Reduce 69
41	or	Reduce 69
41	and	Reduce 69
41	==	Reduce 69
41	!=	Reduce 69
41	<	Reduce 69
41	<=	Reduce 69
41	>	Reduce 69
41	>=	Reduce 69
41	,	Reduce 69
41	)	Reduce 69
41	then	Reduce 69
41	else	Reduce 69
41	end	Reduce 69
41	+	Shift 79
41	-	Shift 80
42	$	Reduce 72
42	;	Reduce 72
42	}	Reduce 72
42	identifier	Reduce 72
42	integer	Reduce 72
42	string	Reduce 72
42	boolean	Reduce 72
42	(	Reduce 72
42	[	Reduce 72
42	{	Reduce 72
42	or	Reduce 72
42	and	Reduce 72
42	==	Reduce 72
42	!=	Reduce 72
42	<	Reduce 72
42	<=	Reduce 72
42	>	Reduce 72
42	>=	Reduce 72
42	+	Reduce 72
42	-	Reduce 72
42	,	Reduce 72
42	)	Reduce 72
42	then	Reduce 72
42	else	Reduce 72
42	end	Reduce 72
42	*	Shift 81
42	/	Shift 82
43	$	Reduce 75
43	;	Reduce 75
43	}	Reduce 75
43	identifier	Reduce 75
43	integer	Reduce 75
43	string	Reduce 75
43	boolean	Reduce 75
43	(	Reduce 75
43	[	Reduce 75
43	{	Reduce 75
43	or	Reduce 75
43	and	Reduce 75
43	==	Reduce 75
43	!=	Reduce 75
43	<	Reduce 75
43	<=	Reduce 75
43	>	Reduce 75
43	>=	Reduce 75
43	+	Reduce 75
43	-	Reduce 75
43	*	Reduce 75
43	/	Reduce 75
43	,	Reduce 75
43	)	Reduce 75
43	then	Reduce 75
43	else	Reduce 75
43	end	Reduce 75
44	$	Reduce 78
44	;	Reduce 78
44	}	Reduce 78
44	identifier	Reduce 78
44	integer	Reduce 78
44	string	Reduce 78
44	boolean	Reduce 78
44	(	Reduce 78
44	[	Reduce 78
44	{	Reduce 78
44	or	Reduce 78
44	and	Reduce 78
44	==	Reduce 78
44	!=	Reduce 78
44	<	Reduce 78
44	<=	Reduce 78
44	>	Reduce 78
44	>=	Reduce 78
44	+	Reduce 78
44	-	Reduce 78
44	*	Reduce 78
44	/	Reduce 78
44	,	Reduce 78
44	)	Reduce 78
44	then	Reduce 78
44	else	Reduce 78
44	end	Reduce 78
45	identifier	Shift 10
46	identifier	Shift 10
47	)	Shift 86
47	{	Shift 45
47	[	Shift 46
47	\	Shift 48
47	let	Shift 49
47	if	Shift 50
47	case	Shift 51
47	(	Shift 47
47	!	Shift 52
47	-	Shift 53
47	identifier	Shift 44
47	integer	Shift 54
47	string	Shift 55
47	boolean	Shift 56
48	identifier	Shift 89
49	{	Shift 90
50	(	Shift 47
50	!	Shift 52
50	-	Shift 53
50	identifier	Shift 44
50	integer	Shift 54
50	string	Shift 55
50	boolean	Shift 56
51	(	Shift 47
51	!	Shift 52
51	-	Shift 53
51	identifier	Shift 44
51	integer	Shift 54
51	string	Shift 55
51	boolean	Shift 56
52	!	Shift 52
52	-	Shift 53
52	identifier	Shift 44
52	integer	Shift 54
52	string	Shift 55
52	boolean	Shift 56
52	(	Shift 70
53	identifier	Shift 44
53	integer	Shift 54
53	string	Shift 55
53	boolean	Shift 56
53	(	Shift 70
54	$	Reduce 79
54	;	Reduce 79
54	}	Reduce 79
54	identifier	Reduce 79
54	integer	Reduce 79
54	string	Reduce 79
54	boolean	Reduce 79
54	(	Reduce 79
54	[	Reduce 79
54	{	Reduce 79
54	or	Reduce 79
54	and	Reduce 79
54	==	Reduce 79
54	!=	Reduce 79
54	<	Reduce 79
54	<=	Reduce 79
54	>	Reduce 79
54	>=	Reduce 79
54	+	Reduce 79
54	-	Reduce 79
54	*	Reduce 79
54	/	Reduce 79
54	,	Reduce 79
54	)	Reduce 79
54	then	Reduce 79
54	else	Reduce 79
54	end	Reduce 79
55	$	Reduce 80
55	;	Reduce 80
55	}	Reduce 80
55	identifier	Reduce 80
55	integer	Reduce 80
55	string	Reduce 80
55	boolean	Reduce 80
55	(	Reduce 80
55	[	Reduce 80
55	{	Reduce 80
55	or	Reduce 80
55	and	Reduce 80
55	==	Reduce 80
55	!=	Reduce 80
55	<	Reduce 80
55	<=	Reduce 80
55	>	Reduce 80
55	>=	Reduce 80
55	+	Reduce 80
55	-	Reduce 80
55	*	Reduce 80
55	/	Reduce 80
55	,	Reduce 80
55	)	Reduce 80
55	then	Reduce 80
55	else	Reduce 80
55	end	Reduce 80
56	$	Reduce 81
56	;	Reduce 81
56	}	Reduce 81
56	identifier	Reduce 81
56	integer	Reduce 81
56	string	Reduce 81
56	boolean	Reduce 81
56	(	Reduce 81
56	[	Reduce 81
56	{	Reduce 81
56	or	Reduce 81
56	and	Reduce 81
56	==	Reduce 81
56	!=	Reduce 81
56	<	Reduce 81
56	<=	Reduce 81
56	>	Reduce 81
56	>=	Reduce 81
56	+	Reduce 81
56	-	Reduce 81
56	*	Reduce 81
56	/	Reduce 81
56	,	Reduce 81
56	)	Reduce 81
56	then	Reduce 81
56	else	Reduce 81
56	end	Reduce 81
57	}	Reduce 6
57	|	Reduce 6
57	=	Reduce 6
57	)	Reduce 6
57	,	Reduce 6
57	>	Reduce 6
57	{	Reduce 6
57	[	Reduce 6
57	(	Reduce 6
57	identifier	Reduce 6
57	]	Reduce 6
57	@	Reduce 6
58	}	Reduce 18
58	|	Reduce 18
58	>	Reduce 18
58	]	Reduce 18
58	{	Shift 19
58	[	Shift 20
58	(	Shift 21
58	identifier	Shift 18
59	>	Shift 96
60	.	Shift 97
61	.	Shift 98
62	}	Reduce 11
62	|	Reduce 11
62	=	Reduce 11
62	LocFun	Reduce 11
62	)	Reduce 11
62	,	Reduce 11
62	>	Reduce 11
62	{	Reduce 11
62	[	Reduce 11
62	(	Reduce 11
62	identifier	Reduce 11
62	]	Reduce 11
62	@	Reduce 11
63	{	Shift 19
63	[	Shift 20
63	(	Shift 21
63	identifier	Shift 18
64	}	Shift 101
65	}	Reduce 28
65	|	Shift 102
66	}	Reduce 20
66	|	Reduce 20
66	{	Shift 19
66	[	Shift 20
66	(	Shift 21
66	identifier	Shift 18
67	$	Reduce 47
67	;	Reduce 47
67	}	Reduce 47
67	identifier	Reduce 47
67	integer	Reduce 47
67	string	Reduce 47
67	boolean	Reduce 47
67	(	Reduce 47
67	[	Reduce 47
67	{	Reduce 47
67	,	Reduce 47
67	)	Reduce 47
67	else	Reduce 47
67	end	Reduce 47
67	then	Reduce 47
68	identifier	Shift 10
69	{	Shift 19
69	[	Shift 20
69	(	Shift 21
69	identifier	Shift 18
70	)	Shift 86
70	{	Shift 45
70	[	Shift 46
70	\	Shift 48
70	let	Shift 49
70	if	Shift 50
70	case	Shift 51
70	(	Shift 47
70	!	Shift 52
70	-	Shift 53
70	identifier	Shift 44
70	integer	Shift 54
70	string	Shift 55
70	boolean	Shift 56
71	-	Shift 53
71	identifier	Shift 44
71	integer	Shift 54
71	string	Shift 55
71	boolean	Shift 56
71	(	Shift 70
72	-	Shift 53
72	identifier	Shift 44
72	integer	Shift 54
72	string	Shift 55
72	boolean	Shift 56
72	(	Shift 70
73	-	Shift 53
73	identifier	Shift 44
73	integer	Shift 54
73	string	Shift 55
73	boolean	Shift 56
73	(	Shift 70
74	-	Shift 53
74	identifier	Shift 44
74	integer	Shift 54
74	string	Shift 55
74	boolean	Shift 56
74	(	Shift 70
75	-	Shift 53
75	identifier	Shift 44
75	integer	Shift 54
75	string	Shift 55
75	boolean	Shift 56
75	(	Shift 70
76	-	Shift 53
76	identifier	Shift 44
76	integer	Shift 54
76	string	Shift 55
76	boolean	Shift 56
76	(	Shift 70
77	-	Shift 53
77	identifier	Shift 44
77	integer	Shift 54
77	string	Shift 55
77	boolean	Shift 56
77	(	Shift 70
78	-	Shift 53
78	identifier	Shift 44
78	integer	Shift 54
78	string	Shift 55
78	boolean	Shift 56
78	(	Shift 70
79	-	Shift 53
79	identifier	Shift 44
79	integer	Shift 54
79	string	Shift 55
79	boolean	Shift 56
79	(	Shift 70
80	-	Shift 53
80	identifier	Shift 44
80	integer	Shift 54
80	string	Shift 55
80	boolean	Shift 56
80	(	Shift 70
81	-	Shift 53
81	identifier	Shift 44
81	integer	Shift 54
81	string	Shift 55
81	boolean	Shift 56
81	(	Shift 70
82	-	Shift 53
82	identifier	Shift 44
82	integer	Shift 54
82	string	Shift 55
82	boolean	Shift 56
82	(	Shift 70
83	}	Shift 120
84	]	Shift 121
85	,	Shift 123
85	)	Shift 122
86	$	Reduce 82
86	;	Reduce 82
86	}	Reduce 82
86	identifier	Reduce 82
86	integer	Reduce 82
86	string	Reduce 82
86	boolean	Reduce 82
86	(	Reduce 82
86	[	Reduce 82
86	{	Reduce 82
86	or	Reduce 82
86	and	Reduce 82
86	==	Reduce 82
86	!=	Reduce 82
86	<	Reduce 82
86	<=	Reduce 82
86	>	Reduce 82
86	>=	Reduce 82
86	+	Reduce 82
86	-	Reduce 82
86	*	Reduce 82
86	/	Reduce 82
86	,	Reduce 82
86	)	Reduce 82
86	then	Reduce 82
86	else	Reduce 82
86	end	Reduce 82
87	.	Shift 124
88	.	Reduce 40
88	identifier	Shift 89
89	:	Shift 126
90	identifier	Shift 4
91	then	Shift 129
91	[	Shift 69
91	{	Shift 68
91	identifier	Shift 44
91	integer	Shift 54
91	string	Shift 55
91	boolean	Shift 56
91	(	Shift 70
92	{	Shift 130
92	[	Shift 69
92	identifier	Shift 44
92	integer	Shift 54
92	string	Shift 55
92	boolean	Shift 56
92	(	Shift 70
93	$	Reduce 56
93	;	Reduce 56
93	}	Reduce 56
93	identifier	Reduce 56
93	integer	Reduce 56
93	string	Reduce 56
93	boolean	Reduce 56
93	(	Reduce 56
93	[	Reduce 56
93	{	Reduce 56
93	,	Reduce 56
93	)	Reduce 56
93	then	Reduce 56
93	else	Reduce 56
93	end	Reduce 56
94	$	Reduce 76
94	;	Reduce 76
94	}	Reduce 76
94	identifier	Reduce 76
94	integer	Reduce 76
94	string	Reduce 76
94	boolean	Reduce 76
94	(	Reduce 76
94	[	Reduce 76
94	{	Reduce 76
94	or	Reduce 76
94	and	Reduce 76
94	==	Reduce 76
94	!=	Reduce 76
94	<	Reduce 76
94	<=	Reduce 76
94	>	Reduce 76
94	>=	Reduce 76
94	+	Reduce 76
94	-	Reduce 76
94	*	Reduce 76
94	/	Reduce 76
94	,	Reduce 76
94	)	Reduce 76
94	then	Reduce 76
94	else	Reduce 76
94	end	Reduce 76
95	}	Reduce 19
95	|	Reduce 19
95	>	Reduce 19
95	]	Reduce 19
96	}	Reduce 14
96	|	Reduce 14
96	=	Reduce 14
96	LocFun	Reduce 14
96	)	Reduce 14
96	,	Reduce 14
96	>	Reduce 14
96	{	Reduce 14
96	[	Reduce 14
96	(	Reduce 14
96	identifier	Reduce 14
96	]	Reduce 14
96	@	Reduce 14
97	{	Shift 19
97	[	Shift 20
97	(	Shift 21
97	identifier	Shift 18
98	{	Shift 19
98	[	Shift 20
98	(	Shift 21
98	identifier	Shift 18
99	)	Reduce 16
99	,	Shift 133
100	)	Shift 134
101	$	Reduce 26
101	;	Reduce 26
102	identifier	Shift 66
103	}	Reduce 21
103	|	Reduce 21
104	}	Reduce 27
104	|	Reduce 27
105	}	Shift 136
106	]	Shift 137
107	)	Shift 122
108	$	Reduce 58
108	;	Reduce 58
108	}	Reduce 58
108	identifier	Reduce 58
108	integer	Reduce 58
108	string	Reduce 58
108	boolean	Reduce 58
108	(	Reduce 58
108	[	Reduce 58
108	{	Reduce 58
108	or	Reduce 58
108	,	Reduce 58
108	)	Reduce 58
108	then	Reduce 58
108	else	Reduce 58
108	end	Reduce 58
108	and	Shift 72
109	$	Reduce 60
109	;	Reduce 60
109	}	Reduce 60
109	identifier	Reduce 60
109	integer	Reduce 60
109	string	Reduce 60
109	boolean	Reduce 60
109	(	Reduce 60
109	[	Reduce 60
109	{	Reduce 60
109	or	Reduce 60
109	and	Reduce 60
109	,	Reduce 60
109	)	Reduce 60
109	then	Reduce 60
109	else	Reduce 60
109	end	Reduce 60
109	==	Shift 73
109	!=	Shift 74
110	$	Reduce 62
110	;	Reduce 62
110	}	Reduce 62
110	identifier	Reduce 62
110	integer	Reduce 62
110	string	Reduce 62
110	boolean	Reduce 62
110	(	Reduce 62
110	[	Reduce 62
110	{	Reduce 62
110	or	Reduce 62
110	and	Reduce 62
110	==	Reduce 62
110	!=	Reduce 62
110	,	Reduce 62
110	)	Reduce 62
110	then	Reduce 62
110	else	Reduce 62
110	end	Reduce 62
110	<	Shift 75
110	<=	Shift 77
110	>	Shift 76
110	>=	Shift 78
111	$	Reduce 63
111	;	Reduce 63
111	}	Reduce 63
111	identifier	Reduce 63
111	integer	Reduce 63
111	string	Reduce 63
111	boolean	Reduce 63
111	(	Reduce 63
111	[	Reduce 63
111	{	Reduce 63
111	or	Reduce 63
111	and	Reduce 63
111	==	Reduce 63
111	!=	Reduce 63
111	,	Reduce 63
111	)	Reduce 63
111	then	Reduce 63
111	else	Reduce 63
111	end	Reduce 63
111	<	Shift 75
111	<=	Shift 77
111	>	Shift 76
111	>=	Shift 78
112	$	Reduce 65
112	;	Reduce 65
112	}	Reduce 65
112	identifier	Reduce 65
112	integer	Reduce 65
112	string	Reduce 65
112	boolean	Reduce 65
112	(	Reduce 65
112	[	Reduce 65
112	{	Reduce 65
112	or	Reduce 65
112	and	Reduce 65
112	==	Reduce 65
112	!=	Reduce 65
112	<	Reduce 65
112	<=	Reduce 65
112	>	Reduce 65
112	>=	Reduce 65
112	,	Reduce 65
112	)	Reduce 65
112	then	Reduce 65
112	else	Reduce 65
112	end	Reduce 65
112	+	Shift 79
112	-	Shift 80
113	$	Reduce 67
113	;	Reduce 67
113	}	Reduce 67
113	identifier	Reduce 67
113	integer	Reduce 67
113	string	Reduce 67
113	boolean	Reduce 67
113	(	Reduce 67
113	[	Reduce 67
113	{	Reduce 67
113	or	Reduce 67
113	and	Reduce 67
113	==	Reduce 67
113	!=	Reduce 67
113	<	Reduce 67
113	<=	Reduce 67
113	>	Reduce 67
113	>=	Reduce 67
113	,	Reduce 67
113	)	Reduce 67
113	then	Reduce 67
113	else	Reduce 67
113	end	Reduce 67
113	+	Shift 79
113	-	Shift 80
114	$	Reduce 66
114	;	Reduce 66
114	}	Reduce 66
114	identifier	Reduce 66
114	integer	Reduce 66
114	string	Reduce 66
114	boolean	Reduce 66
114	(	Reduce 66
114	[	Reduce 66
114	{	Reduce 66
114	or	Reduce 66
114	and	Reduce 66
114	==	Reduce 66
114	!=	Reduce 66
114	<	Reduce 66
114	<=	Reduce 66
114	>	Reduce 66
114	>=	Reduce 66
114	,	Reduce 66
114	)	Reduce 66
114	then	Reduce 66
114	else	Reduce 66
114	end	Reduce 66
114	+	Shift 79
114	-	Shift 80
115	$	Reduce 68
115	;	Reduce 68
115	}	Reduce 68
115	identifier	Reduce 68
115	integer	Reduce 68
115	string	Reduce 68
115	boolean	Reduce 68
115	(	Reduce 68
115	[	Reduce 68
115	{	Reduce 68
115	or	Reduce 68
115	and	Reduce 68
115	==	Reduce 68
115	!=	Reduce 68
115	<	Reduce 68
115	<=	Reduce 68
115	>	Reduce 68
115	>=	Reduce 68
115	,	Reduce 68
115	)	Reduce 68
115	then	Reduce 68
115	else	Reduce 68
115	end	Reduce 68
115	+	Shift 79
115	-	Shift 80
116	$	Reduce 70
116	;	Reduce 70
116	}	Reduce 70
116	identifier	Reduce 70
116	integer	Reduce 70
116	string	Reduce 70
116	boolean	Reduce 70
116	(	Reduce 70
116	[	Reduce 70
116	{	Reduce 70
116	or	Reduce 70
116	and	Reduce 70
116	==	Reduce 70
116	!=	Reduce 70
116	<	Reduce 70
116	<=	Reduce 70
116	>	Reduce 70
116	>=	Reduce 70
116	+	Reduce 70
116	-	Reduce 70
116	,	Reduce 70
116	)	Reduce 70
116	then	Reduce 70
116	else	Reduce 70
116	end	Reduce 70
116	*	Shift 81
116	/	Shift 82
117	$	Reduce 71
117	;	Reduce 71
117	}	Reduce 71
117	identifier	Reduce 71
117	integer	Reduce 71
117	string	Reduce 71
117	boolean	Reduce 71
117	(	Reduce 71
117	[	Reduce 71
117	{	Reduce 71
117	or	Reduce 71
117	and	Reduce 71
117	==	Reduce 71
117	!=	Reduce 71
117	<	Reduce 71
117	<=	Reduce 71
117	>	Reduce 71
117	>=	Reduce 71
117	+	Reduce 71
117	-	Reduce 71
117	,	Reduce 71
117	)	Reduce 71
117	then	Reduce 71
117	else	Reduce 71
117	end	Reduce 71
117	*	Shift 81
117	/	Shift 82
118	$	Reduce 73
118	;	Reduce 73
118	}	Reduce 73
118	identifier	Reduce 73
118	integer	Reduce 73
118	string	Reduce 73
118	boolean	Reduce 73
118	(	Reduce 73
118	[	Reduce 73
118	{	Reduce 73
118	or	Reduce 73
118	and	Reduce 73
118	==	Reduce 73
118	!=	Reduce 73
118	<	Reduce 73
118	<=	Reduce 73
118	>	Reduce 73
118	>=	Reduce 73
118	+	Reduce 73
118	-	Reduce 73
118	*	Reduce 73
118	/	Reduce 73
118	,	Reduce 73
118	)	Reduce 73
118	then	Reduce 73
118	else	Reduce 73
118	end	Reduce 73
119	$	Reduce 74
119	;	Reduce 74
119	}	Reduce 74
119	identifier	Reduce 74
119	integer	Reduce 74
119	string	Reduce 74
119	boolean	Reduce 74
119	(	Reduce 74
119	[	Reduce 74
119	{	Reduce 74
119	or	Reduce 74
119	and	Reduce 74
119	==	Reduce 74
119	!=	Reduce 74
119	<	Reduce 74
119	<=	Reduce 74
119	>	Reduce 74
119	>=	Reduce 74
119	+	Reduce 74
119	-	Reduce 74
119	*	Reduce 74
119	/	Reduce 74
119	,	Reduce 74
119	)	Reduce 74
119	then	Reduce 74
119	else	Reduce 74
119	end	Reduce 74
120	.	Shift 138
121	.	Shift 139
122	$	Reduce 83
122	;	Reduce 83
122	}	Reduce 83
122	identifier	Reduce 83
122	integer	Reduce 83
122	string	Reduce 83
122	boolean	Reduce 83
122	(	Reduce 83
122	[	Reduce 83
122	{	Reduce 83
122	or	Reduce 83
122	and	Reduce 83
122	==	Reduce 83
122	!=	Reduce 83
122	<	Reduce 83
122	<=	Reduce 83
122	>	Reduce 83
122	>=	Reduce 83
122	+	Reduce 83
122	-	Reduce 83
122	*	Reduce 83
122	/	Reduce 83
122	,	Reduce 83
122	)	Reduce 83
122	then	Reduce 83
122	else	Reduce 83
122	end	Reduce 83
123	{	Shift 45
123	[	Shift 46
123	\	Shift 48
123	let	Shift 49
123	if	Shift 50
123	case	Shift 51
123	(	Shift 47
123	!	Shift 52
123	-	Shift 53
123	identifier	Shift 44
123	integer	Shift 54
123	string	Shift 55
123	boolean	Shift 56
124	{	Shift 45
124	[	Shift 46
124	\	Shift 48
124	let	Shift 49
124	if	Shift 50
124	case	Shift 51
124	(	Shift 47
124	!	Shift 52
124	-	Shift 53
124	identifier	Shift 44
124	integer	Shift 54
124	string	Shift 55
124	boolean	Shift 56
125	.	Reduce 41
126	{	Shift 19
126	[	Shift 20
126	(	Shift 21
126	identifier	Shift 18
127	}	Reduce 31
127	;	Shift 144
128	}	Shift 145
129	{	Shift 45
129	[	Shift 46
129	\	Shift 48
129	let	Shift 49
129	if	Shift 50
129	case	Shift 51
129	(	Shift 47
129	!	Shift 52
129	-	Shift 53
129	identifier	Shift 44
129	integer	Shift 54
129	string	Shift 55
129	boolean	Shift 56
130	identifier	Shift 149
131	}	Reduce 7
131	|	Reduce 7
131	=	Reduce 7
131	LocFun	Reduce 7
131	)	Reduce 7
131	,	Reduce 7
131	>	Reduce 7
131	{	Reduce 7
131	[	Reduce 7
131	(	Reduce 7
131	identifier	Reduce 7
131	]	Reduce 7
131	@	Reduce 7
132	}	Reduce 8
132	|	Reduce 8
132	=	Reduce 8
132	LocFun	Reduce 8
132	)	Reduce 8
132	,	Reduce 8
132	>	Reduce 8
132	{	Reduce 8
132	[	Reduce 8
132	(	Reduce 8
132	identifier	Reduce 8
132	]	Reduce 8
132	@	Reduce 8
133	{	Shift 19
133	[	Shift 20
133	(	Shift 21
133	identifier	Shift 18
134	}	Reduce 15
134	|	Reduce 15
134	=	Reduce 15
134	LocFun	Reduce 15
134	)	Reduce 15
134	,	Reduce 15
134	>	Reduce 15
134	{	Reduce 15
134	[	Reduce 15
134	(	Reduce 15
134	identifier	Reduce 15
134	]	Reduce 15
134	@	Reduce 15
135	}	Reduce 29
136	$	Reduce 49
136	;	Reduce 49
136	}	Reduce 49
136	identifier	Reduce 49
136	integer	Reduce 49
136	string	Reduce 49
136	boolean	Reduce 49
136	(	Reduce 49
136	[	Reduce 49
136	{	Reduce 49
136	,	Reduce 49
136	)	Reduce 49
136	else	Reduce 49
136	end	Reduce 49
136	then	Reduce 49
137	$	Reduce 48
137	;	Reduce 48
137	}	Reduce 48
137	identifier	Reduce 48
137	integer	Reduce 48
137	string	Reduce 48
137	boolean	Reduce 48
137	(	Reduce 48
137	[	Reduce 48
137	{	Reduce 48
137	,	Reduce 48
137	)	Reduce 48
137	else	Reduce 48
137	end	Reduce 48
137	then	Reduce 48
138	{	Shift 45
138	[	Shift 46
138	\	Shift 48
138	let	Shift 49
138	if	Shift 50
138	case	Shift 51
138	(	Shift 47
138	!	Shift 52
138	-	Shift 53
138	identifier	Shift 44
138	integer	Shift 54
138	string	Shift 55
138	boolean	Shift 56
139	{	Shift 45
139	[	Shift 46
139	\	Shift 48
139	let	Shift 49
139	if	Shift 50
139	case	Shift 51
139	(	Shift 47
139	!	Shift 52
139	-	Shift 53
139	identifier	Shift 44
139	integer	Shift 54
139	string	Shift 55
139	boolean	Shift 56
140	)	Reduce 53
140	,	Shift 153
141	)	Shift 154
142	$	Reduce 35
142	;	Reduce 35
142	}	Reduce 35
142	,	Reduce 35
142	)	Reduce 35
142	else	Reduce 35
142	end	Reduce 35
143	@	Shift 155
144	identifier	Shift 4
145	{	Shift 45
145	[	Shift 46
145	\	Shift 48
145	let	Shift 49
145	if	Shift 50
145	case	Shift 51
145	(	Shift 47
145	!	Shift 52
145	-	Shift 53
145	identifier	Shift 44
145	integer	Shift 54
145	string	Shift 55
145	boolean	Shift 56
146	else	Shift 158
147	}	Shift 159
148	}	Reduce 44
148	;	Shift 160
149	}	Reduce 1
149	identifier	Shift 10
149	=>	Reduce 3
150	)	Reduce 17
151	$	Reduce 33
151	;	Reduce 33
151	}	Reduce 33
151	,	Reduce 33
151	)	Reduce 33
151	else	Reduce 33
151	end	Reduce 33
152	$	Reduce 34
152	;	Reduce 34
152	}	Reduce 34
152	,	Reduce 34
152	)	Reduce 34
152	else	Reduce 34
152	end	Reduce 34
153	{	Shift 45
153	[	Shift 46
153	\	Shift 48
153	let	Shift 49
153	if	Shift 50
153	case	Shift 51
153	(	Shift 47
153	!	Shift 52
153	-	Shift 53
153	identifier	Shift 44
153	integer	Shift 54
153	string	Shift 55
153	boolean	Shift 56
154	$	Reduce 52
154	;	Reduce 52
154	}	Reduce 52
154	identifier	Reduce 52
154	integer	Reduce 52
154	string	Reduce 52
154	boolean	Reduce 52
154	(	Reduce 52
154	[	Reduce 52
154	{	Reduce 52
154	,	Reduce 52
154	)	Reduce 52
154	then	Reduce 52
154	else	Reduce 52
154	end	Reduce 52
155	identifier	Shift 165
156	}	Reduce 32
157	end	Shift 166
158	{	Shift 45
158	[	Shift 46
158	\	Shift 48
158	let	Shift 49
158	if	Shift 50
158	case	Shift 51
158	(	Shift 47
158	!	Shift 52
158	-	Shift 53
158	identifier	Shift 44
158	integer	Shift 54
158	string	Shift 55
158	boolean	Shift 56
159	$	Reduce 38
159	;	Reduce 38
159	}	Reduce 38
159	,	Reduce 38
159	)	Reduce 38
159	else	Reduce 38
159	end	Reduce 38
160	identifier	Shift 169
161	}	Reduce 2
161	=>	Reduce 4
162	=>	Shift 170
163	)	Reduce 54
164	.	Reduce 42
164	identifier	Reduce 42
165	.	Reduce 43
165	identifier	Reduce 43
166	$	Reduce 36
166	;	Reduce 36
166	}	Reduce 36
166	,	Reduce 36
166	)	Reduce 36
166	else	Reduce 36
166	end	Reduce 36
167	$	Reduce 37
167	;	Reduce 37
167	}	Reduce 37
167	,	Reduce 37
167	)	Reduce 37
167	else	Reduce 37
167	end	Reduce 37
168	}	Reduce 45
169	=>	Reduce 3
169	identifier	Shift 10
170	{	Shift 45
170	[	Shift 46
170	\	Shift 48
170	let	Shift 49
170	if	Shift 50
170	case	Shift 51
170	(	Shift 47
170	!	Shift 52
170	-	Shift 53
170	identifier	Shift 44
170	integer	Shift 54
170	string	Shift 55
170	boolean	Shift 56
171	=>	Reduce 4
172	}	Reduce 46
172	;	Reduce 46
